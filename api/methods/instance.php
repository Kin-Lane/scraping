<?php$route = '/api/';$app->get($route, function ()  use ($app){	$ReturnObject = array();	if(isset($_REQUEST['query'])){ $query = $_REQUEST['query']; } else { $query = '';}				if($query!='')		{		$Query = "SELECT * FROM api WHERE Name = '%" . $query . "%' OR About LIKE '%" . $query . "%'";		}	else 		{		$Query = "SELECT * FROM api";				}			$Query .= " ORDER BY Name ASC";		$Query .= " LIMIT 250";	//echo $Query . "<br />";		$DatabaseResult = mysql_query($Query) or die('Query failed: ' . mysql_error());	  	while ($Database = mysql_fetch_assoc($DatabaseResult))		{		$api_id = $Database['API_ID'];				$host = $_SERVER['HTTP_HOST'];				$api_id =  encrypt($api_id,$host);				$name = $Database['Name'];		$about = $Database['About'];		$pattern = '/[^\w ]+/';		$replacement = '';		$about = preg_replace($pattern, $replacement, $about);								$rank = $Database['Kin_Rank'];		$organization_id = $Database['Company_ID'];								// manipulation zone				$F = array();		$F['api_id'] = $api_id;		$F['name'] = $name;		$F['about'] = $about;		$F['rank'] = $rank;		$F['organization_id'] = $organization_id;				array_push($ReturnObject, $F);				}		$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});$route = '/api/';	$app->post($route, function () use ($app){		$Add = 1;	$ReturnObject = array();	 	$request = $app->request();  	$param = $request->params();		if(isset($_POST['name'])){ $name = $param['name']; } else { $name = ''; }	if(isset($_POST['about'])){ $about = $param['about']; } else { $about = ''; }	if(isset($_POST['rank'])){ $rank = $param['rank']; } else { $rank = 7; }	if(isset($_POST['organization_id'])){ $organization_id = $param['organization_id']; } else { $organization_id = 0; }		  	$Query = "SELECT * FROM api WHERE Name = '" . $name . "'";	//echo $Query . "<br />";	$Database = mysql_query($Query) or die('Query failed: ' . mysql_error());		if($Database && mysql_num_rows($Database))		{			$ThisItem = mysql_fetch_assoc($Database);			}	else 		{		$Query = "INSERT INTO api(Name,About,Kin_Rank,Company_ID) VALUES('" . mysql_real_escape_string($name) . "','" . mysql_real_escape_string($about) . "'," . mysql_real_escape_string($rank) . "," . mysql_real_escape_string($organization_id) . ")";		//echo $query . "<br />";		mysql_query($Query) or die('Query failed: ' . mysql_error());		$api_id = mysql_insert_id();						}	$host = $_SERVER['HTTP_HOST'];			$api_id =  encrypt($api_id,$host);				$F = array();	$F['api_id'] = $api_id;	$F['name'] = $name;	$F['about'] = $about;	$F['rank'] = $rank;	$F['organization_id'] = $organization_id;		array_push($ReturnObject, $F);			$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/tags/';$app->get($route, function ()  use ($app){	$ReturnObject = array();	 	$request = $app->request();  	$params = $request->params();		$Query = "SELECT t.Tag_ID, t.Tag, count(*) AS API_Count from tags t";	$Query .= " INNER JOIN api_tag_pivot ctp ON t.Tag_ID = ctp.Tag_ID";	$Query .= " GROUP BY t.Tag ORDER BY count(*) DESC";	$DatabaseResult = mysql_query($Query) or die('Query failed: ' . mysql_error());	  	while ($Database = mysql_fetch_assoc($DatabaseResult))		{		$tag_id = $Database['Tag_ID'];				$host = $_SERVER['HTTP_HOST'];				$tag_id =  encrypt($tag_id,$host);						$tag = $Database['Tag'];		$api_count = $Database['API_Count'];		$F = array();		$F['tag_id'] = $tag_id;		$F['tag'] = $tag;		$F['api_count'] = $api_count;				array_push($ReturnObject, $F);		}		$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});		$route = '/api/tags/:tag';$app->delete($route, function ($tag)  use ($app){	$ReturnObject = array();	 	$request = $app->request();  	$params = $request->params();		$Query = "SELECT t.Tag_ID, t.Tag FROM tags WHERE Tag = '" . trim(mysql_real_escape_string($tag)) . "'";	$TagResult = mysql_query($LinkQuery) or die('Query failed: ' . mysql_error());			if($TagResult && mysql_num_rows($TagResult))		{			$Tag = mysql_fetch_assoc($TagResult);		$Tag_ID = $Tag['Tag_ID'];		$Tag_Text = $Tag['Tag'];		$DeleteQuery = "DELETE FROM api_tag_pivot WHERE Tag_ID = " . $Tag_ID;		$DeleteResult = mysql_query($DeleteQuery) or die('Query failed: ' . mysql_error());					$DeleteQuery = "DELETE FROM tags WHERE Tag = '" . trim(mysql_real_escape_string($tag)) . "'";		$DeleteResult = mysql_query($DeleteQuery) or die('Query failed: ' . mysql_error());					$host = $_SERVER['HTTP_HOST'];				$Tag_ID =  encrypt($Tag_ID,$host);			$F = array();		$F['tag_id'] = $Tag_ID;		$F['tag'] = $Tag_Text;		$F['api_count'] = 0;				array_push($ReturnObject, $F);		}		$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});				$route = '/api/tags/:tag/api/';$app->get($route, function ($tag)  use ($app){	$ReturnObject = array();	 	$request = $app->request();  	$params = $request->params();			if(isset($_REQUEST['week'])){ $week = $params['week']; } else { $week = date('W'); }	if(isset($_REQUEST['year'])){ $year = $params['year']; } else { $year = date('Y'); }		$Query = "SELECT c.* from tags t";	$Query .= " JOIN api_tag_pivot ctp ON t.Tag_ID = ctp.Tag_ID";	$Query .= " JOIN api c ON ctp.API_ID = c.API_ID";	$Query .= " WHERE WEEK(c.Item_Date) = " . $week . " AND YEAR(c.Item_Date) = " . $year . " AND Tag = '" . $tag . "'";	$DatabaseResult = mysql_query($Query) or die('Query failed: ' . mysql_error());	  	while ($Database = mysql_fetch_assoc($DatabaseResult))		{		$api_id = $Database['API_ID'];		$name = $Database['Name'];		$about = $Database['About'];		$pattern = '/[^\w ]+/';		$replacement = '';		$about = preg_replace($pattern, $replacement, $about);						$rank = $Database['Kin_Rank'];		$organization_id = $Database['Company_ID'];								// manipulation zone		$host = $_SERVER['HTTP_HOST'];				$api_id =  encrypt($api_id,$host);							$F = array();		$F['api_id'] = $api_id;		$F['name'] = $name;		$F['about'] = $about;		$F['rank'] = $rank;		$F['organization_id'] = $organization_id;				array_push($ReturnObject, $F);		}		$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});											$route = '/api/:api_id/';$app->get($route, function ($api_id)  use ($app){					$host = $_SERVER['HTTP_HOST'];			$api_id =  decrypt($api_id,$host);		$ReturnObject = array();			$Query = "SELECT * FROM api WHERE API_ID = '" . $api_id . "'";	//echo $Query . "<br />";		$DatabaseResult = mysql_query($Query) or die('Query failed: ' . mysql_error());	  	while ($Database = mysql_fetch_assoc($DatabaseResult))		{		$api_id = $Database['API_ID'];		$name = $Database['Name'];		$about = $Database['About'];		$pattern = '/[^\w ]+/';		$replacement = '';		$about = preg_replace($pattern, $replacement, $about);						$rank = $Database['Kin_Rank'];		$organization_id = $Database['Company_ID'];								// manipulation zone				$host = $_SERVER['HTTP_HOST'];				$api_id =  encrypt($api_id,$host);							$F = array();		$F['api_id'] = $api_id;		$F['name'] = $name;		$F['about'] = $about;		$F['rank'] = $rank;		$F['organization_id'] = $organization_id;				array_push($ReturnObject, $F);		}		$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});		$route = '/api/:api_id/';	$app->put($route, function ($api_id) use ($app){					$host = $_SERVER['HTTP_HOST'];			$api_id =  encrypt($api_id,$host);							$ReturnObject = array();	 	$request = $app->request();  	$_POST = $request->params();			$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);			if(isset($_POST['name'])){ $name = $_POST['name']; } elseif(isset($_POST['name'])){ $name = $_REQUEST['name']; } else { $name = ''; }	if(isset($_POST['description'])){ $description = $_POST['description']; } elseif(isset($_POST['description'])){ $description = $_REQUEST['description']; } else { $description = ''; }	if(isset($_POST['url'])){ $url = $_POST['url']; } elseif(isset($_POST['url'])){ $url = $_REQUEST['url']; } else { $url = ''; }	if(isset($_POST['tags'])){ $tags = $_POST['tags']; } elseif(isset($_POST['tags'])){ $tags = $_REQUEST['tags']; } else { $tags = ''; }	  	$Query = "SELECT * FROM blog WHERE ID = " . $api_id;	//echo $Query . "<br />";	$Database = mysql_query($Query) or die('Query failed: ' . mysql_error());		if($Database && mysql_num_rows($Database))		{			$query = "UPDATE blog SET";		$query .= " name = '" . mysql_real_escape_string($name) . "'";				if($description!='') { $query .= ", description = '" . mysql_real_escape_string($description) . "'"; }		if($description!='') { $query .= ", url = '" . mysql_real_escape_string($url) . "'"; }		if($description!='') { $query .= ", tags = '" . mysql_real_escape_string($tags) . "'"; }				$query .= " WHERE slug = '" . $slug . "'";				//echo $query . "<br />";		mysql_query($query) or die('Query failed: ' . mysql_error());			}	$F = array();	$F['name'] = $name;	$F['url'] = $url;	$F['tags'] = $tags;	$F['slug'] = $slug;		array_push($ReturnObject, $F);			$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));	});	$route = '/api/:api_id/';	$app->delete($route, function ($api_id) use ($app){		$Add = 1;	$ReturnObject = array();		$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);			 	$request = $app->request();  	$params = $request->params();		$query = "DELETE FROM blog WHERE slug = '" . $api_id . "'";	//echo $query . "<br />";	mysql_query($query) or die('Query failed: ' . mysql_error());		});		$route = '/api/:api_id/tags/';$app->get($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);		$ReturnObject = array();			$Query = "SELECT t.Tag_ID, t.Tag, count(*) AS API_Count from tags t";	$Query .= " JOIN api_tag_pivot ctp ON t.Tag_ID = ctp.Tag_ID";	$Query .= " WHERE ctp.API_ID = " . $api_id;	$Query .= " GROUP BY t.Tag ORDER BY count(*) DESC";	$DatabaseResult = mysql_query($Query) or die('Query failed: ' . mysql_error());	  	while ($Database = mysql_fetch_assoc($DatabaseResult))		{		$tag_id = $Database['Tag_ID'];		$tag = $Database['Tag'];		$api_count = $Database['API_Count'];		$F = array();		$F['tag_id'] = $tag_id;		$F['tag'] = $tag;		$F['api_count'] = $api_count;				array_push($ReturnObject, $F);		}		$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/tags/';$app->post($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);		$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['tag']))		{		$tag = trim(mysql_real_escape_string($param['tag']));					$CheckTagQuery = "SELECT Tag_ID FROM tags where Tag = '" . $tag . "'";		$CheckTagResults = mysql_query($CheckTagQuery) or die('Query failed: ' . mysql_error());				if($CheckTagResults && mysql_num_rows($CheckTagResults))			{			$Tag = mysql_fetch_assoc($CheckTagResults);					$Tag_ID = $Tag['Tag_ID'];			}		else			{			$query = "INSERT INTO tags(Tag) VALUES('" . trim($_POST['Tag']) . "'); ";			mysql_query($query) or die('Query failed: ' . mysql_error());				$Tag_ID = mysql_insert_id();						}		$CheckTagPivotQuery = "SELECT * FROM api_tag_pivot where Tag_ID = " . trim($Tag_ID) . " AND API_ID = " . trim($api_id);		$CheckTagPivotResult = mysql_query($CheckTagPivotQuery) or die('Query failed: ' . mysql_error());				if($CheckTagPivotResult && mysql_num_rows($CheckTagPivotResult))			{			$CheckTagPivot = mysql_fetch_assoc($CheckTagPivotResult);					}		else			{			$query = "INSERT INTO api_tag_pivot(Tag_ID,API_ID) VALUES(" . $Tag_ID . "," . $api_id . "); ";			mysql_query($query) or die('Query failed: ' . mysql_error());								}		$Tag_ID = encrypt($Tag_ID,$host);		$F = array();		$F['tag_id'] = $Tag_ID;		$F['tag'] = $tag;		$F['api_count'] = 0;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});		$route = '/api/:api_id/tags/:tag';$app->delete($route, function ($api_id,$Tag)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);		$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['tag']))		{		$tag = trim(mysql_real_escape_string($param['tag']));					$CheckTagQuery = "SELECT Tag_ID FROM tags where Tag = '" . $tag . "'";		$CheckTagResults = mysql_query($CheckTagQuery) or die('Query failed: ' . mysql_error());				if($CheckTagResults && mysql_num_rows($CheckTagResults))			{			$Tag = mysql_fetch_assoc($CheckTagResults);					$Tag_ID = $Tag['Tag_ID'];			$DeleteQuery = "DELETE FROM api_tag_pivot where Tag_ID = " . trim($Tag_ID) . " AND API_ID = " . trim($api_id);			$DeleteResult = mysql_query($DeleteQuery) or die('Query failed: ' . mysql_error());			}		$Tag_ID = encrypt($Tag_ID,$host);		$F = array();		$F['tag_id'] = $Tag_ID;		$F['tag'] = $tag;		$F['api_count'] = 0;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});						// 		// Begin Notes		//		$route = '/api/:api_id/notes/';$app->get($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);		$ReturnObject = array();			$Query = "SELECT ID,Curate_ID,Type,Note  from api_notes cn";	$Query .= " WHERE cn.API_ID = " . $api_id;	$DatabaseResult = mysql_query($Query) or die('Query failed: ' . mysql_error());	  	while ($Database = mysql_fetch_assoc($DatabaseResult))		{		$Note_ID = $Database['ID'];		$Type = $Database['Type'];		$Note = $Database['Note'];			$Note_ID = decrypt($Note_ID,$host);			$F = array();		$F['note_id'] = $Note_ID;		$F['type'] = $Type;		$F['note'] = $Note;				array_push($ReturnObject, $F);		}		$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/notes/';$app->post($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['Type']) && isset($param['Note']))		{		$Type = trim(mysql_real_escape_string($param['Type']));		$Note = trim(mysql_real_escape_string($param['Note']));		$query = "INSERT INTO api_notes(API_ID,Type,Note) VALUES(" . $api_id . "," . $Type . "," . $Note . "); ";		mysql_query($query) or die('Query failed: ' . mysql_error());							$Note_ID = mysql_insert_id();							$Note_ID = decrypt($Note_ID,$host);							$F = array();		$F['note_id'] = $Note_ID;		$F['type'] = $Type;		$F['note'] = $Note;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});		$route = '/api/:api_id/notes/:note_id';$app->put($route, function ($api_id,$note_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$note_id = decrypt($note_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['Type']) && isset($param['Note']))		{					$Type = trim(mysql_real_escape_string($param['Type']));		$Note = trim(mysql_real_escape_string($param['Note']));		$query = "UPDATE api_notes SET Type = '" . $Type . "', Note = '" . $Type . "' WHERE ID = " . $Note_ID;		mysql_query($query) or die('Query failed: ' . mysql_error());							$Note_ID = mysql_insert_id();							$note_id = encrypt($note_id,$host);						$F = array();		$F['note_id'] = $note_id;		$F['type'] = $Type;		$F['note'] = $Note;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/notes/:note_id';$app->delete($route, function ($api_id,$note_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$note_id = decrypt($note_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();		$DeleteQuery = "DELETE FROM api_note WHERE ID = " . trim($note_id) . " AND API_ID = " . trim($api_id);	$DeleteResult = mysql_query($DeleteQuery) or die('Query failed: ' . mysql_error());	$note_id = encrypt($note_id,$host);			$F = array();	$F['note_id'] = $note_id;	$F['type'] = '';	$F['note'] = '';		array_push($ReturnObject, $F);		$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));		});						// 		// End Notes		//	// 		// Begin urls		//		$route = '/api/:api_id/urls/';$app->get($route, function ($api_id)  use ($app){		$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();			$Query = "SELECT * from api_urls cn";	$Query .= " WHERE cn.API_ID = " . $api_id;	$DatabaseResult = mysql_query($Query) or die('Query failed: ' . mysql_error());	  	while ($Database = mysql_fetch_assoc($DatabaseResult))		{		$url_id = $Database['API_URL_ID'];		$type = $Database['Type'];		$url = $Database['URL'];		$name = $Database['Name'];		$url_id = decrypt($url_id,$host);				$F = array();		$F['url_id'] = $url_id;		$F['type'] = $type;		$F['url'] = $url;		$F['name'] = $name;				array_push($ReturnObject, $F);		}		$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/urls/';$app->post($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['Type']) && isset($param['url']))		{					$type = trim(mysql_real_escape_string($param['type']));		$url = trim(mysql_real_escape_string($param['url']));		$name = trim(mysql_real_escape_string($param['name']));		$query = "INSERT INTO api_url(API_ID,Type,URL,Name) VALUES(" . $api_id . ",'" . $Type . "','" . $url . "','" . $name . "')";		mysql_query($query) or die('Query failed: ' . mysql_error());							$url_id = mysql_insert_id();							$url_id = encrypt($url_id,$host);						$F = array();		$F['url_id'] = $url_id;		$F['type'] = $type;		$F['url'] = $url;		$F['name'] = $name;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});		$route = '/api/:api_id/urls/:url_id';$app->put($route, function ($api_id,$url_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$url_id = decrypt($url_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['type']) && isset($param['url']) && isset($param['name']))		{					$type = trim(mysql_real_escape_string($param['type']));		$url = trim(mysql_real_escape_string($param['url']));		$name = trim(mysql_real_escape_string($param['name']));		$query = "UPDATE api_urls SET Type = '" . $type . "', URL = '" . $url . "', Name = '" . $name . "' WHERE ID = " . $url_id;		mysql_query($query) or die('Query failed: ' . mysql_error());							$url_id = mysql_insert_id();							$url_id = encrypt($url_id,$host);						$F = array();		$F['url_id'] = $url_id;		$F['type'] = $type;		$F['url'] = $url;		$F['name'] = $name;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/urls/:url_id';$app->delete($route, function ($api_id,$url_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$url_id = decrypt($url_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();		$DeleteQuery = "DELETE FROM api_url WHERE ID = " . trim($url_id);	$DeleteResult = mysql_query($DeleteQuery) or die('Query failed: ' . mysql_error());	$url_id = encrypt($url_id,$host);	$F = array();	$F['url_id'] = $url_id;	$F['type'] = '';	$F['url'] = '';		array_push($ReturnObject, $F);		$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));		});						// 		// End urls		//	// 		// Begin images		//		$route = '/api/:api_id/images/';$app->get($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();			$Query = "SELECT * from api_image ai";	$Query .= " WHERE ai.API_ID = " . $api_id;	$DatabaseResult = mysql_query($Query) or die('Query failed: ' . mysql_error());	  	while ($Database = mysql_fetch_assoc($DatabaseResult))		{		$image_id = $Database['API_Image_ID'];		$type = $Database['Type'];		$path = $Database['Image_Path'];		$name = $Database['Image_Name'];			$image_id = encrypt($image_id,$host);		$F = array();		$F['image_id'] = $image_id;		$F['type'] = $type;		$F['path'] = $path;		$F['name'] = $name;				array_push($ReturnObject, $F);		}		$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/images/';$app->post($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['type']) && isset($param['path']) && isset($param['name']))		{					$type = trim(mysql_real_escape_string($param['type']));		$path = trim(mysql_real_escape_string($param['path']));		$name = trim(mysql_real_escape_string($param['name']));		$query = "INSERT INTO api_image(API_ID,Image_Name,Image_Path,Type) VALUES(" . $api_id . ",'" . $name . "','" . $path . "','" . $type . "')";		mysql_query($query) or die('Query failed: ' . mysql_error());							$image_id = mysql_insert_id();							$image_id = encrypt($image_id,$host);						$F = array();		$F['image_id'] = $image_id;		$F['type'] = $type;		$F['path'] = $path;		$F['name'] = $name;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});		$route = '/api/:api_id/images/:image_id';$app->put($route, function ($api_id,$image_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$image_id = decrypt($image_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['type']) && isset($param['path']) && isset($param['name']))		{					$type = trim(mysql_real_escape_string($param['type']));		$path = trim(mysql_real_escape_string($param['path']));		$name = trim(mysql_real_escape_string($param['name']));		$query = "UPDATE api_image SET Type = '" . $type . "', Image_Name = '" . $name . "', Image_Path = '" . $path . "' WHERE API_Image_ID = " . $image_id;		mysql_query($query) or die('Query failed: ' . mysql_error());							$image_id = mysql_insert_id();							$image_id = encrypt($image_id,$host);						$F = array();		$F['image_id'] = $image_id;		$F['type'] = $type;		$F['path'] = $path;		$F['name'] = $name;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/images/:image_id';$app->delete($route, function ($api_id,$image_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$image_id = decrypt($image_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();		$DeleteQuery = "DELETE FROM api_image WHERE API_Image_ID = " . $image_id;	$DeleteResult = mysql_query($DeleteQuery) or die('Query failed: ' . mysql_error());	$image_id = encrypt($image_id,$host);		$F = array();	$F['image_id'] = $image_id;	$F['type'] = "";	$F['path'] = "";	$F['name'] = "";		array_push($ReturnObject, $F);		$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));		});				// 		// End images		//// 		// Begin screenshots		//		$route = '/api/:api_id/screenshots/';$app->get($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();			$Query = "SELECT * FROM api_screenshot as";	$Query .= " WHERE as.API_ID = " . $api_id;	$DatabaseResult = mysql_query($Query) or die('Query failed: ' . mysql_error());	  	while ($Database = mysql_fetch_assoc($DatabaseResult))		{					$screenshot_id = $Database['ID'];		$path = $Database['Image_URL'];		$name = $Database['Name'];		$type = $Database['Type'];		$screenshot_id = encrypt($screenshot_id,$host);			$F = array();		$F['screenshot_id'] = $screenshot_id;		$F['name'] = $name;		$F['path'] = $path;		$F['type'] = $type;				array_push($ReturnObject, $F);		}		$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/screenshots/';$app->post($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['type']) && isset($param['path']) && isset($param['name']))		{		$type = trim(mysql_real_escape_string($param['type']));		$path = trim(mysql_real_escape_string($param['path']));		$name = trim(mysql_real_escape_string($param['name']));		$query = "INSERT INTO api_screenshot(API_ID,Type,Name,Image_URL) VALUES(" . $api_id . ",'" . $type . "','" . $path . "','" . $name . "')";		mysql_query($query) or die('Query failed: ' . mysql_error());							$screenshot_id = mysql_insert_id();							$screenshot_id = decrypt($screenshot_id,$host);						$F = array();		$F['screenshot_id'] = $screenshot_id;		$F['name'] = $name;		$F['path'] = $path;		$F['type'] = $type;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});		$route = '/api/:api_id/screenshots/:screenshot_id';$app->put($route, function ($api_id,$screenshot_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$screenshot_id = decrypt($screenshot_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['type']) && isset($param['path']) && isset($param['name']))		{		$type = trim(mysql_real_escape_string($param['type']));		$path = trim(mysql_real_escape_string($param['path']));		$name = trim(mysql_real_escape_string($param['name']));		$query = "UPDATE api_screenshot SET Type = '" . $type . "', Image_URL = '" . $path . "', Name = '" . $name . "' WHERE ID = " . $screenshot_id;		mysql_query($query) or die('Query failed: ' . mysql_error());							$screenshot_id = mysql_insert_id();							$screenshot_id = encrypt($screenshot_id,$host);						$F = array();		$F['screenshot_id'] = $screenshot_id;		$F['name'] = $name;		$F['path'] = $path;		$F['type'] = $type;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/screenshots/:screenshot_id';$app->delete($route, function ($api_id,$screenshot_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$screenshot_id = decrypt($screenshot_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();		$DeleteQuery = "DELETE FROM api_screenshot WHERE ID = " . $screenshot_id;	$DeleteResult = mysql_query($DeleteQuery) or die('Query failed: ' . mysql_error());	$screenshot_id = encrypt($screenshot_id,$host);	$F = array();	$F['screenshot_id'] = $screenshot_id;	$F['name'] = "";	$F['path'] = "";	$F['type'] = "";		array_push($ReturnObject, $F);		$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));		});						// 		// End screenshots		//// 		// Begin buildingblocks		//		$route = '/api/:api_id/buildingblocks/';$app->get($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();			$Query = "SELECT bb.Building_Block_ID,abbp.Company_ID,abbp.Tools_ID,abbp.URL,bb.Name,bb.About,bb.Sort_Order,bbc.Name as Building_Block_Category FROM building_block bb";	$Query .= " JOIN api_building_block_pivot abbp ON bb.Building_Block_ID = abbp.Building_Block_ID";	$Query .= " JOIN building_block_category bbc ON bb.Building_Block_Category_ID = bbc.BuildingBlockCategory_ID";	$Query .= " WHERE abbp.API_ID = " . $api_id;	$DatabaseResult = mysql_query($Query) or die('Query failed: ' . mysql_error());	  	while ($Database = mysql_fetch_assoc($DatabaseResult))		{		$building_block_id = $Database['Building_Block_ID'];		$organization_id = $Database['Company_ID'];		$tools_id = $Database['Tools_ID'];		$url = $Database['URL'];		$name = $Database['Name'];		$about = $Database['About'];				$pattern = '/[^\w ]+/';		$replacement = '';		$about = preg_replace($pattern, $replacement, $about);						$building_block_category = $Database['Building_Block_Category'];		$url = $Database['Sort_Order'];						$building_block_id = encrypt($building_block_id,$host);		$organization_id = encrypt($organization_id,$host);										$F = array();		$F['buildingblock_id'] = $building_block_id;		$F['organization_id'] = $organization_id;		$F['tools_id'] = $tools_id;		$F['url'] = $url;		$F['name'] = $name;		$F['about'] = $about;		$F['building_block_category'] = $building_block_category;		$F['url'] = $url;				array_push($ReturnObject, $F);		}		$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/buildingblocks/';$app->post($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['api_id']) && isset($param['building_block_id']))		{					$building_block_id = trim(mysql_real_escape_string($param['building_block_id']));		$organization_id = trim(mysql_real_escape_string($param['organization_id']));		if($organization_id==''){ $organization_id = 0; }		$tools_id = trim(mysql_real_escape_string($param['tools_id']));		if($tools_id==''){ $tools_id = 0; }		$url = trim(mysql_real_escape_string($param['url']));		$building_block_id = decrypt($building_block_id,$host);		$organization_id = decrypt($organization_id,$host);		$tools_id = decrypt($tools_id,$host);		$query = "INSERT INTO api_building_block_pivot(API_ID,Building_Block_ID,Company_ID,Tools_ID,URL) VALUES(" . $api_id . "," . $building_block_id . "," . $organization_id . "," . $tools_id . ",'" . $url . "'); ";		mysql_query($query) or die('Query failed: ' . mysql_error());							$buildingblock_id = mysql_insert_id();							$building_block_id = encrypt($building_block_id,$host);		$organization_id = encrypt($organization_id,$host);		$tools_id = encrypt($tools_id,$host);								$F = array();		$F['building_block_id'] = $building_block_id;		$F['organization_id'] = $organization_id;		$F['tools_id'] = $tools_id;		$F['url'] = $url;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});		$route = '/api/:api_id/buildingblocks/:buildingblock_id';$app->put($route, function ($api_id,$buildingblock_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$buildingblock_id = decrypt($buildingblock_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['api_id']) && isset($param['building_block_id']))		{					$building_block_id = trim(mysql_real_escape_string($param['building_block_id']));		$organization_id = trim(mysql_real_escape_string($param['organization_id']));		if($organization_id==''){ $organization_id = 0; }		$tools_id = trim(mysql_real_escape_string($param['tools_id']));		if($tools_id==''){ $tools_id = 0; }		$url = trim(mysql_real_escape_string($param['url']));				$building_block_id = decrypt($building_block_id,$host);		$organization_id = decrypt($organization_id,$host);		$tools_id = decrypt($tools_id,$host);		$query = "UPDATE api_building_block_pivot SET";		$query .= " Building_Block_ID = " . $building_block_id . ",";		$query .= "  Company_ID = " . $organization_id . ",";		$query .= "  Tools_ID = " . $tools_id . ",";		$query .= "  URL = '" . $url . "'";		$query .= "  WHERE API_ID = " . $api_id . " AND Building_Block_ID = " . $buildingblock_id;				mysql_query($query) or die('Query failed: ' . mysql_error());							$buildingblock_id = mysql_insert_id();							$building_block_id = encrypt($building_block_id,$host);		$organization_id = encrypt($organization_id,$host);			$tools_id = encrypt($tools_id,$host);							$F = array();		$F['building_block_id'] = $building_block_id;		$F['organization_id'] = $organization_id;		$F['tools_id'] = $tools_id;		$F['url'] = $url;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/buildingblocks/:buildingblock_id';$app->delete($route, function ($api_id,$buildingblock_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$buildingblock_id = decrypt($buildingblock_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();		$DeleteQuery = "DELETE FROM api_building_block_pivot WHERE Building_Block_ID = " . $buildingblock_id . " AND API_ID = " . $api_id;	$DeleteResult = mysql_query($DeleteQuery) or die('Query failed: ' . mysql_error());		$api_id = encrypt($api_id,$host);	$buildingblock_id = encrypt($buildingblock_id,$host);	$F = array();	$F['api_id'] = $api_id;	$F['building_block_id'] = $buildingblock_id;		array_push($ReturnObject, $F);		$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));		});						// 		// End buildingblocks		//// 		// Begin Logs		//		$route = '/api/:api_id/logs/';$app->get($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();			$Query = "SELECT * FROM api_log al";	$Query .= " WHERE al.API_ID = " . $api_id;	$DatabaseResult = mysql_query($Query) or die('Query failed: ' . mysql_error());	  	while ($Database = mysql_fetch_assoc($DatabaseResult))		{					$log_id = $Database['API_Log_ID'];		$details = $Database['About'];		$pattern = '/[^\w ]+/';		$replacement = '';		$about = preg_replace($pattern, $replacement, $about);						$Type = $Database['Type'];		$log_date = $Database['Log_Date'];			$log_id = encrypt($log_id,$host);		$F = array();		$F['log_id'] = $log_id;		$F['type'] = $Type;		$F['details'] = $details;		$F['log_date'] = $log_date;				array_push($ReturnObject, $F);		}		$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/logs/';$app->post($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['type']) && isset($param['details']))		{		$type = trim(mysql_real_escape_string($param['type']));		$details = trim(mysql_real_escape_string($param['details']));		$log_date = date('Y-m-d H:i:s');				$query = "INSERT INTO api_log(API_ID,Type,About,Log_Date) VALUES(" . $api_id . ",'" . $type . "','" . $details . "','" . $log_date . "')";		mysql_query($query) or die('Query failed: ' . mysql_error());							$log_id = mysql_insert_id();				$log_id = encrypt($log_id,$host);		$F = array();		$F['log_id'] = $log_id;		$F['type'] = $Type;		$F['details'] = $details;		$F['log_date'] = $log_date;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});		$route = '/api/:api_id/logs/:log_id';$app->put($route, function ($api_id,$log_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$log_id = decrypt($log_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			if(isset($param['Type']) && isset($param['log']))		{					$type = trim(mysql_real_escape_string($param['type']));		$details = trim(mysql_real_escape_string($param['details']));		$query = "UPDATE api_log SET Type = '" . $type . "', About = '" . $details . "' WHERE API_Log_ID = " . $log_id;		mysql_query($query) or die('Query failed: ' . mysql_error());							$log_ID = mysql_insert_id();							$log_id = encrypt($log_id,$host);						$F = array();		$F['log_id'] = $log_id;		$F['type'] = $Type;		$F['details'] = $details;		$F['log_date'] = $log_date;				array_push($ReturnObject, $F);		}				$app->response()->header("Content-Type", "application/json");		echo stripslashes(format_json(json_encode($ReturnObject)));	});			$route = '/api/:api_id/logs/:log_id';$app->delete($route, function ($api_id,$log_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$log_id = decrypt($log_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();		$DeleteQuery = "DELETE FROM api_log WHERE API_Log_ID = " . $log_id;	$DeleteResult = mysql_query($DeleteQuery) or die('Query failed: ' . mysql_error());	$log_id = encrypt($log_id,$host);		$F = array();	$F['log_id'] = $log_id;	$F['type'] = '';	$F['details'] = '';	$F['log_date'] = '';		array_push($ReturnObject, $F);		$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));		});						// 		// End logs		//// 		// Begin Definitions		//	$route = '/api/:api_id/definitions/export/swagger/1.2/';$app->get($route, function ($api_id)  use ($app,$awsAccessKey,$awsSecretKey,$awsSiteBucket,$awsRootURL){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();		$ReturnSwagger = "";		$swagger = "";	$info_title = "";	$info_description = "";	$info_termsOfService = "";	$info_contact_name = "";	$info_contact_url = "";	$info_contact_email = "";	$info_license_name = "";	$info_license_url = "";	$info_version = "";	$host = "";	$basePath = "";	$schemes = "";	$consumes = "";	$produces = "";		$DefinitionQuery = "SELECT * FROM api_swagger WHERE API_ID = " . $api_id . " ORDER BY import_date DESC";	//echo $DefinitionQuery . chr(13);	$DefinitionResult = mysql_query($DefinitionQuery) or die('Query failed: ' . mysql_error());		if($DefinitionResult && mysql_num_rows($DefinitionResult))		{					$Definition = mysql_fetch_assoc($DefinitionResult);				$API_Swagger_ID  = $Definition['API_Swagger_ID'];		$swagger = $Definition['swagger'];		$info_title = $Definition['info_title'];		$info_description = $Definition['info_description'];		$info_termsOfService = $Definition['info_termsOfService'];		$info_contact_name = $Definition['info_contact_name'];		$info_contact_url = $Definition['info_contact_url'];		$info_contact_email = $Definition['info_contact_email'];				$info_license_name = $Definition['info_license_name'];		$info_license_url = $Definition['info_license_url'];		$info_version = $Definition['info_version'];		$host = $Definition['host'];		$basePath = $Definition['basePath'];		$resourcePath = $Definition['host'];		$schemes = $Definition['schemes'];		$consumes = $Definition['consumes'];		$produces = $Definition['produces'];				$Swagger = array();		$Swagger['apiVersion'] = "1.0.0";		$Swagger['swaggerVersion'] = "1.2";		$Swagger['basePath'] = $resourcePath;		$Swagger['resourcePath'] = $basePath;								//$SchemesArray = array('http');				//$Swagger['schemes'] = $SchemesArray;			$ProducesArray = array('application/json');				$Swagger['produces'] = $ProducesArray;				$ProducesArray = array('application/json');				$Swagger['consumes'] = $ProducesArray;						$Paths = array();			$SwaggerPath = array();			$LastType = "";		$SwaggerPathQuery = "SELECT * FROM api_swagger_paths WHERE API_Swagger_ID = " . $API_Swagger_ID . " ORDER BY path,pathtype";		//echo $SwaggerPathQuery . "<br />";		$SwaggerPathResults = mysql_query($SwaggerPathQuery) or die('Query failed: ' . mysql_error());				if($SwaggerPathResults && mysql_num_rows($SwaggerPathResults))			{				while ($SwaggerPathRow = mysql_fetch_assoc($SwaggerPathResults))				{									$Swagger_Path_ID = $SwaggerPathRow['ID'];					$path = $SwaggerPathRow['path'];				$type = strtolower($SwaggerPathRow['pathtype']);								$operation_summary = $SwaggerPathRow['operation_summary'];				$operation_description = $SwaggerPathRow['operation_description'];				$operation_operationId = $SwaggerPathRow['operation_operationId'];				$schemas = $SwaggerPathRow['pathschemas'];									$tags = $SwaggerPathRow['tags'];																		if($LastType=="")					{					$SwaggerPathType["path"] = $path; 						$SwaggerPathType["operations"] = array();					}										$SwaggerPathTypeDetail = array();				$SwaggerPathTypeDetail['method'] = $type;				$SwaggerPathTypeDetail['summary'] = $operation_summary;				$SwaggerPathTypeDetail['notes'] = $operation_description;				$SwaggerPathTypeDetail['nickname'] = $operation_operationId;								$SwaggerPathFieldQuery = "SELECT * FROM api_swagger_path_fields WHERE Swagger_Path_ID = " . $Swagger_Path_ID . " ORDER BY name";				//echo $SwaggerPathFieldQuery . "<br />";				$SwaggerPathFieldResults = mysql_query($SwaggerPathFieldQuery) or die('Query failed: ' . mysql_error());								if($SwaggerPathFieldResults && mysql_num_rows($SwaggerPathFieldResults))					{											$SwaggerPathTypeDetail['parameters'] = array();													while ($SwaggerPathField = mysql_fetch_assoc($SwaggerPathFieldResults))						{						$Swagger_Path_Field_ID = $SwaggerPathField['ID'];							$field_name = $SwaggerPathField['name'];						$field_in = $SwaggerPathField['fieldin'];						$field_description = $SwaggerPathField['description'];						$field_required = $SwaggerPathField['required'];						$field_type = $SwaggerPathField['fieldtype'];						$field_format = $SwaggerPathField['fieldformat'];											$field_default = $SwaggerPathField['fielddefault'];													$SwaggerPathTypeField = array();						$SwaggerPathTypeField['paramType'] = $field_in;						$SwaggerPathTypeField['name'] = $field_name;							if($field_description!='')							{											$SwaggerPathTypeField['description'] = $field_description;							}												if($field_required!=='1') { $field_required = true; } else  { $field_required = false; }						//$SwaggerPathTypeField['required'] = $field_required;												if($field_type!='' && $field_in != 'body')							{												$SwaggerPathTypeField['type'] = strtolower($field_type);												//$SwaggerPathTypeField['format'] = $field_format;							$SwaggerPathTypeField['default'] = $field_default;							}																	array_push($SwaggerPathTypeDetail['parameters'], $SwaggerPathTypeField);						unset($SwaggerPathTypeField);						}					}				$ResponsesArray = array();								$SwaggerPathResponsesQuery = "SELECT * FROM api_swagger_path_responses WHERE Swagger_Path_ID = " . $Swagger_Path_ID;				//echo $SwaggerPathResponsesQuery . "<br />";				$SwaggerPathResponsesResults = mysql_query($SwaggerPathResponsesQuery) or die('Query failed: ' . mysql_error());								if($SwaggerPathResponsesResults && mysql_num_rows($SwaggerPathResponsesResults))					{						while ($SwaggerPathResponse = mysql_fetch_assoc($SwaggerPathResponsesResults))						{						$Swagger_Path_Field_ID = $SwaggerPathResponse['ID'];							$response_name = $SwaggerPathResponse['name'];						$response_description = $SwaggerPathResponse['description'];												$R = array();											$R['code'] = $response_name;						$R['message'] = $response_description;																									array_push($ResponsesArray, $R);												unset($R);						}					}				else 					{						$response_name = "200";					$response_description = "OK";						$R = array();										$R['code'] = $response_name;					$R['message'] = $response_description;																							array_push($ResponsesArray, $R);										unset($R);													}								foreach ($ResponsesArray as $key => $value)					{					$SwaggerPathTypeDetail['responses'] = $value;					}																																		if($LastType==$path || $LastType == "")					{					//echo $LastType . " == " . $path . chr(13);					//var_dump($SwaggerPathTypeDetail);					//echo "<hr />";					array_push($SwaggerPathType["operations"], $SwaggerPathTypeDetail);						}				else									{					//echo $LastType . " != " . $path . chr(13);					//var_dump($SwaggerPathTypeDetail);					//echo "<hr />";										array_push($SwaggerPathType["operations"], $SwaggerPathTypeDetail);											array_push($SwaggerPath, $SwaggerPathType);														array_push($Paths, $SwaggerPath);										$SwaggerPathType["path"] = $path; 						$SwaggerPathType["operations"] = array();															}									$LastType = $path;																							}			}			foreach ($Paths as $key => $value)			{			$Swagger['apis'] = $value;			}			$DefinitionArray = array();						$SwaggerDefinitionQuery = "SELECT * FROM api_swagger_definitions WHERE API_Swagger_ID = " . $API_Swagger_ID;		//echo $SwaggerPathFieldQuery . "<br />";		$SwaggerDefinitionResults = mysql_query($SwaggerDefinitionQuery) or die('Query failed: ' . mysql_error());				if($SwaggerDefinitionResults && mysql_num_rows($SwaggerDefinitionResults))			{				while ($SwaggerDefinition = mysql_fetch_assoc($SwaggerDefinitionResults))				{				$Definition_ID = $SwaggerDefinition['ID'];					$definition_name = $SwaggerDefinition['name'];								$DefinitionArray[$definition_name] = array();				$DefinitionPropertiesArray['id'] = $definition_name;							$DefinitionPropertiesArray['properties'] = array();					$SwaggerDefinitionPropertyQuery = "SELECT * FROM api_swagger_definition_properties WHERE Swagger_Definition_ID = " . $Definition_ID;				//echo $SwaggerDefinitionPropertyQuery . "<br />";				$SwaggerDefinitionPropertyResult = mysql_query($SwaggerDefinitionPropertyQuery) or die('Query failed: ' . mysql_error());								if($SwaggerDefinitionPropertyResult && mysql_num_rows($SwaggerDefinitionPropertyResult))					{						while ($SwaggerDefinitionProperty = mysql_fetch_assoc($SwaggerDefinitionPropertyResult))						{						$Swagger_Definition_Property_ID = $SwaggerDefinitionProperty['ID'];							$property_name = $SwaggerDefinitionProperty['name'];						$property_description = $SwaggerDefinitionProperty['description'];						$property_type = $SwaggerDefinitionProperty['fieldtype'];						$property_format = $SwaggerDefinitionProperty['fieldformat'];													$DefinitionPropertyArray[$property_name] = array();												//if($property_type=='') { $property_type = "string"; }												$C = array();						if($property_type!='') 							{												$C['description'] = $property_description;							}						else							{												$C['description'] = "This is a default description.";							}													if($property_type!='') 							{							$C['type'] = $property_type;							}						else							{							$C['type'] = 'string';							}													$DefinitionPropertyArray[$property_name] = $C;													}					}								$object = new stdClass();					foreach ($DefinitionPropertiesArray as $key => $value)					{					$object = $value;					}														$DefinitionPropertiesArray['properties'] = $DefinitionPropertyArray;							unset($C);								$DefinitionArray[$definition_name] = $DefinitionPropertiesArray;								unset($DefinitionPropertiesArray);									}			}				if(count($DefinitionArray)>1)			{			$Swagger['models'] = array();					foreach ($DefinitionArray as $key => $value)				{				$Swagger['models']->$key = $value;				}			}			$Swagger['models'] = $DefinitionArray;				}	$Swagger_JSON = stripslashes(format_json(json_encode($Swagger)));		$export_file_name = PrepareFileName($info_title);	$export_file_name = $export_file_name . "-" . date('Y-m-d-H-i-s') . ".json";			$local_file = "/var/www/html/kin_lane/api/api/temp/" . $export_file_name;		$tmpFile = fopen($local_file, "w") or die("Unable to open file!");	fwrite($tmpFile, $Swagger_JSON);	fclose($tmpFile);			//instantiate the class	$s3 = new S3($awsAccessKey, $awsSecretKey);	$fileName = "kin-lane/stack/api/export/" . $export_file_name;		//echo $awsSiteBucket . "<br />";	//echo $fileName . "<br />";	//echo $fileTempName . "<br />";		//move the file	if ($s3->putObjectFile($local_file, $awsSiteBucket, $fileName, S3::ACL_PUBLIC_READ)) {		//echo "<strong>We successfully uploaded your file.</strong> - " . $awsSiteBucket . " - " . $fileName ;	}else{		//echo "<strong>Something went wrong while uploading your file... sorry.</strong>";	}		$Swagger_Path = $awsRootURL . $fileName;			$ReturnObject['url'] = $Swagger_Path; 		$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));			unlink($local_file);	});	$route = '/api/:api_id/definitions/import/swagger/1.2/';$app->post($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			$import_date = date('Y-m-d H:i:s');	$import_id = $param['appid'];		$api_definition_url = $param['url'];				$ObjectText = file_get_contents($api_definition_url);	$ObjectResult = json_decode($ObjectText,true);	$SwaggerVersion = $ObjectResult['swaggerVersion'];	$SwaggerBasePath = $ObjectResult['basePath'];	$SwaggerResourcePath = $ObjectResult['resourcePath'];	$SwaggerProduces = $ObjectResult['produces'];		$SwaggerAPIs = $ObjectResult['apis'];	$SwaggerModels = $ObjectResult['models'];		//echo "Version: " . $SwaggerVersion . "<br />";	//echo "Base Path: " . $SwaggerBasePath . "<br />";	//echo "Resource Path: " . $SwaggerResourcePath . "<br />";	//echo "Produces: " . $SwaggerProduces . "<br />";		$InsertQuery = "INSERT INTO api_swagger(import_date,import_id,host,basePath) VALUES('" . $import_date . "','" . $import_id . "','" . $SwaggerResourcePath . "','" . $SwaggerBasePath . "')";	//echo $InsertQuery . "<br />";	mysql_query($InsertQuery) or die('Query failed: ' . mysql_error());					$api_definition_id = mysql_insert_id();		foreach($SwaggerAPIs as $APIs)		{		$path = $APIs['path'];		//echo "<br />Path: " . $path . "<br />";						$operations = $APIs['operations'];		foreach($operations as $operation)			{			$method = $operation['method'];			$type = $method;			$operation_summary = $operation['summary'];			$operation_description = $operation['notes'];			$operation_operationId = $operation['nickname'];			$SwaggerPathQuery = "SELECT * FROM api_swagger_paths WHERE API_Swagger_ID = " . $api_definition_id . " AND path = '" . $path . "'  AND pathtype = '" . $type . "'";			//echo $SwaggerQuery . "<br />";			$SwaggerPathResults = mysql_query($SwaggerPathQuery) or die('Query failed: ' . mysql_error());						if($SwaggerPathResults && mysql_num_rows($SwaggerPathResults))				{				$SwaggerPath = mysql_fetch_assoc($SwaggerPathResults);						$Swagger_Path_ID = $SwaggerPath['ID'];				}			else 				{											$InsertQuery = "INSERT INTO api_swagger_paths(API_Swagger_ID,path,pathtype,operation_summary,operation_description,operation_operationId) VALUES(" . $api_definition_id . ",'" . $path . "','" . $type . "','" . mysql_real_escape_string($operation_summary) . "','" . mysql_real_escape_string($operation_description) . "','" . mysql_real_escape_string($operation_operationId) . "')";				//echo $InsertQuery;				mysql_query($InsertQuery) or die('Query failed: ' . mysql_error());				$Swagger_Path_ID = mysql_insert_id();						}										$parameters = $operation['parameters'];			$responseMessages = $operation['responseMessages'];						//echo "method: " . $method . "<br />";					//echo "summary: " . $summary . "<br />";					//echo "notes: " . $notes . "<br />";					//echo "nickname: " . $nickname . "<br />";			//echo "type: " . $type . "<br />";				//var_dump($parameters);			foreach($parameters as $parameter)				{									$parameter_id = '';				if(isset($parameter['id']))					{					$parameter_id = $parameter['id'];					}					$parameter_name = "";				if(isset($parameter['name']))					{					$parameter_name = $parameter['name'];					}										$parameter_description = '';				if(isset($parameter['description']))					{					$parameter_description = $parameter['description'];					}													$parameter_required = $parameter['required'];				if($parameter_required=='')					{					$parameter_required = 0;					}									$parameter_allowMultiple = 0;				if(isset($parameter['allowMultiple']))					{					$parameter_allowMultiple = $parameter['allowMultiple'];					}				$parameter_dataType = "";				if(isset($parameter['dataType']))					{					$parameter_dataType = $parameter['dataType'];					}				$parameter_paramType = "";				if(isset($parameter['paramType']))					{					$parameter_paramType = $parameter['paramType'];					}												//echo "id: " . $parameter_id . "<br />";				//echo "name: " . $parameter_name . "<br />";				//echo "description: " . $parameter_description . "<br />";				//echo "required: " . $parameter_required . "<br />";				//echo "allowMultiple: " . $parameter_allowMultiple . "<br />";				//echo "datatype: " . $parameter_dataType . "<br />";				//echo "paramType: " . $parameter_paramType . "<br />";									$SwaggerQuery = "SELECT * FROM api_swagger_path_fields WHERE Swagger_Path_ID = " . $Swagger_Path_ID . " AND name = '" . mysql_real_escape_string($parameter_name) . "' AND fieldin = '" . $parameter_paramType . "'";				//echo $SwaggerQuery . "<br />";				$SwaggerPathFieldsResults = mysql_query($SwaggerQuery) or die('Query failed: ' . mysql_error());								if(mysql_num_rows($SwaggerPathFieldsResults)==0)					{											$InsertQuery = "INSERT INTO api_swagger_path_fields(Swagger_Path_ID,name,fieldin,description,required,fieldtype) VALUES(" . $Swagger_Path_ID . ",'" . mysql_real_escape_string($parameter_name) . "','" . $parameter_paramType . "','" . mysql_real_escape_string($parameter_description) . "'," . $parameter_required . ",'" . $parameter_dataType . "')";					//echo $InsertQuery;					mysql_query($InsertQuery) or die('Query failed: ' . mysql_error());						}													}							foreach($responseMessages as $responsemessage)				{				$esponseMessage_code = $responsemessage['code'];				$esponseMessage_code = $responsemessage['message'];				//echo "code: " . $esponseMessage_code . "<br />";				//echo "message: " . $esponseMessage_code . "<br />";									}																			}					}				// Data Model	foreach($SwaggerModels as $model)		{					$model_id = $model['id'];			//echo "id: " . $model_id . "<br />";					$model_properties = $model['properties'];			$SwaggerDefinitionQuery = "SELECT * FROM api_swagger_definitions WHERE API_Swagger_ID = " . $api_definition_id . " AND name = '" . $model_id . "'";		//echo $SwaggerDefinitionQuery . "<br />";		$SwaggerDefinitionResults = mysql_query($SwaggerDefinitionQuery) or die('Query failed: ' . mysql_error());		if($SwaggerDefinitionResults && mysql_num_rows($SwaggerDefinitionResults))			{			$SwaggerDefinition = mysql_fetch_assoc($SwaggerDefinitionResults);					$Swagger_Definition_ID = $SwaggerDefinition['ID'];			}		else 			{							$InsertQuery = "INSERT INTO api_swagger_definitions(API_Swagger_ID,name) VALUES(" . $api_definition_id . ",'" . $model_id . "')";			//echo $InsertQuery;			mysql_query($InsertQuery) or die('Query failed: ' . mysql_error());			$Swagger_Definition_ID = mysql_insert_id();				}										foreach($model_properties as $key => $value)			{			$property_name = $key;						//echo $key . " = " . $value;			//echo "name: " . $name . "<br />";			//echo "type: " . $type . "<br />";				//echo "<br />";				if($property_name!='')				{				$property_type = "string";				if(isset( $_REQUEST['name']))					{					$property_type = $value['type'];					}										$SwaggerPropertyQuery = "SELECT * FROM api_swagger_definition_properties WHERE Swagger_Definition_ID = " . $Swagger_Definition_ID . " AND name = '" . $property_name . "'";				//echo $SwaggerPropertyQuery . "<br />";				$SwaggerPropertyResults = mysql_query($SwaggerPropertyQuery) or die('Query failed: ' . mysql_error());								if(mysql_num_rows($SwaggerPropertyResults)==0)					{											$InsertQuery = "INSERT INTO api_swagger_definition_properties(Swagger_Definition_ID,name,fieldtype) VALUES(" . $Swagger_Definition_ID . ",'" . $property_name . "','" . $type . "')";					//echo $InsertQuery;					mysql_query($InsertQuery) or die('Query failed: ' . mysql_error());						}					}							}		}			$ReturnObject['version'] = "Import of Swagger 1.2 (" . $api_definition_url . ") successful.";	$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));			});				$route = '/api/:api_id/definitions/export/swagger/2.0/';$app->get($route, function ($api_id)  use ($app,$awsAccessKey,$awsSecretKey,$awsSiteBucket,$awsRootURL){		$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();		$ReturnSwagger = "";		$swagger = "";	$info_title = "";	$info_description = "";	$info_termsOfService = "";	$info_contact_name = "";	$info_contact_url = "";	$info_contact_email = "";	$info_license_name = "";	$info_license_url = "";	$info_version = "";	$host = "";	$basePath = "";	$schemes = "";	$consumes = "";	$produces = "";		$DefinitionQuery = "SELECT * FROM api_swagger WHERE API_ID = " . $api_id . " ORDER BY import_date DESC";	//echo $DefinitionQuery . chr(13);	$DefinitionResult = mysql_query($DefinitionQuery) or die('Query failed: ' . mysql_error());		if($DefinitionResult && mysql_num_rows($DefinitionResult))		{					$Definition = mysql_fetch_assoc($DefinitionResult);				$API_Swagger_ID  = $Definition['API_Swagger_ID'];		$swagger = $Definition['swagger'];		$info_title = $Definition['info_title'];		$info_description = $Definition['info_description'];		$info_termsOfService = $Definition['info_termsOfService'];		$info_contact_name = $Definition['info_contact_name'];		$info_contact_url = $Definition['info_contact_url'];		$info_contact_email = $Definition['info_contact_email'];				$info_license_name = $Definition['info_license_name'];		$info_license_url = $Definition['info_license_url'];		$info_version = $Definition['info_version'];		$host = $Definition['host'];		$basePath = $Definition['basePath'];		$schemes = $Definition['schemes'];		$consumes = $Definition['consumes'];		$produces = $Definition['produces'];					$Swagger = array();		$Swagger['swagger'] = "2.0";		$Swagger['info'] = array();				$Info = array();		$Info['title'] = $info_title;		$Info['description'] = $info_description;			$Info['termsOfService'] = $info_termsOfService;							$Contact = array();		$Contact['name'] = $info_contact_name;		$Contact['url'] = $info_contact_url;			$Contact['email'] = $info_contact_email;			if($info_contact_name!='')			{			$Info['contact'] = array();					$Info['contact'] = $Contact;			}						$License = array();		$License['name'] = $info_license_name;		$License['url'] = $info_license_url;				if($info_contact_name!='')			{			$Info['license'] = array();					$Info['license'] = $License;			}					$Info['version'] = $info_version;				$Swagger['info'] = $Info;				if($host!='')			{			$Swagger['host'] = $host;			}				if($basePath!='')			{			$Swagger['basePath'] = $basePath;			}				$SchemesArray = array('http');				$Swagger['schemes'] = $SchemesArray;			$ProducesArray = array('application/json');				$Swagger['produces'] = $ProducesArray;				$ProducesArray = array('application/json');				$Swagger['consumes'] = $ProducesArray;						$Paths = array();		//$Swagger['paths'] = array();					$SwaggerPathQuery = "SELECT * FROM api_swagger_paths WHERE API_Swagger_ID = " . $API_Swagger_ID . " ORDER BY path,pathtype";		//echo $SwaggerPathQuery . "<br />";		$SwaggerPathResults = mysql_query($SwaggerPathQuery) or die('Query failed: ' . mysql_error());				if($SwaggerPathResults && mysql_num_rows($SwaggerPathResults))			{				while ($SwaggerPathRow = mysql_fetch_assoc($SwaggerPathResults))				{									$Swagger_Path_ID = $SwaggerPathRow['ID'];					$path = $SwaggerPathRow['path'];				$type = strtolower($SwaggerPathRow['pathtype']);				$operation_summary = $SwaggerPathRow['operation_summary'];				$operation_description = $SwaggerPathRow['operation_description'];				$operation_operationId = $SwaggerPathRow['operation_operationId'];				$schemas = $SwaggerPathRow['pathschemas'];									$tags = $SwaggerPathRow['tags'];								$SwaggerPath[$path] = array();								$SwaggerPathType[$type] = array();										$SwaggerPathTypeDetail = array();				$SwaggerPathTypeDetail['summary'] = $operation_summary;				$SwaggerPathTypeDetail['description'] = $operation_description;				$SwaggerPathTypeDetail['operationId'] = $operation_operationId;								$SwaggerPathFieldQuery = "SELECT * FROM api_swagger_path_fields WHERE Swagger_Path_ID = " . $Swagger_Path_ID . " ORDER BY name";				//echo $SwaggerPathFieldQuery . "<br />";				$SwaggerPathFieldResults = mysql_query($SwaggerPathFieldQuery) or die('Query failed: ' . mysql_error());								if($SwaggerPathFieldResults && mysql_num_rows($SwaggerPathFieldResults))					{											$SwaggerPathTypeDetail['parameters'] = array();													while ($SwaggerPathField = mysql_fetch_assoc($SwaggerPathFieldResults))						{						$Swagger_Path_Field_ID = $SwaggerPathField['ID'];							$field_name = $SwaggerPathField['name'];						$field_in = $SwaggerPathField['fieldin'];						$field_description = $SwaggerPathField['description'];						$field_required = $SwaggerPathField['required'];						$field_type = $SwaggerPathField['fieldtype'];						$field_format = $SwaggerPathField['fieldformat'];											$field_default = $SwaggerPathField['fielddefault'];													$SwaggerPathTypeField = array();						$SwaggerPathTypeField['in'] = $field_in;						$SwaggerPathTypeField['name'] = $field_name;							if($field_description!='')							{											$SwaggerPathTypeField['description'] = $field_description;							}												if($field_required!=='1') { $field_required = true; } else  { $field_required = false; }						//$SwaggerPathTypeField['required'] = $field_required;												if($field_type!='' && $field_in != 'body')							{												$SwaggerPathTypeField['type'] = strtolower($field_type);							}											if($field_format!='' && $field_in != 'body')							{												$SwaggerPathTypeField['format'] = $field_format;							}						if($field_default!='' && $field_in != 'body')							{							$SwaggerPathTypeField['default'] = $field_default;							}													if($field_in == 'body')							{								$SwaggerPathTypeField['schema'] = array();														$R = array();												$R['$ref'] = "#/definitions/holder";																							$SwaggerPathTypeField['schema'] = $R;															unset($R);							unset($SwaggerPathResponseArray);															}																		array_push($SwaggerPathTypeDetail['parameters'], $SwaggerPathTypeField);						unset($SwaggerPathTypeField);						}					}					$ResponsesArray = array();								$SwaggerPathResponsesQuery = "SELECT * FROM api_swagger_path_responses WHERE Swagger_Path_ID = " . $Swagger_Path_ID;				//echo $SwaggerPathResponsesQuery . "<br />";				$SwaggerPathResponsesResults = mysql_query($SwaggerPathResponsesQuery) or die('Query failed: ' . mysql_error());								if($SwaggerPathResponsesResults && mysql_num_rows($SwaggerPathResponsesResults))					{						while ($SwaggerPathResponse = mysql_fetch_assoc($SwaggerPathResponsesResults))						{						$Swagger_Path_Field_ID = $SwaggerPathResponse['ID'];							$response_name = $SwaggerPathResponse['name'];						$response_description = $SwaggerPathResponse['description'];												$response_schema = "";						if(isset($SwaggerPathResponse['responseschema']))							{							$response_schema = $SwaggerPathResponse['responseschema'];							}												$SwaggerPathResponseArray[$response_name] = array();												$R = array();											$R['description'] = $response_description;												$S = array();							$S['$ref'] = $response_schema;												foreach ($S as $key => $value)							{							//$R['schema']->$key = $S;							}																						$SwaggerPathResponseArray[$response_name] = $R;												array_push($ResponsesArray, $SwaggerPathResponseArray);												unset($R);						unset($S);						}					}				else 					{						$response_name = "200";					$response_description = "OK";						$SwaggerPathResponseArray[$response_name] = array();										$R = array();										$R['description'] = $response_description;																			$SwaggerPathResponseArray[$response_name] = $R;										array_push($ResponsesArray, $SwaggerPathResponseArray);										unset($R);					unset($S);						unset($SwaggerPathResponseArray);								}								foreach ($ResponsesArray as $key => $value)					{					$SwaggerPathTypeDetail['responses'] = $value;					}													$SwaggerPathTypeDetail['operationId'] = $operation_operationId;								$TagArray = explode(",",$tags);				if($TagArray) 					{					$SwaggerPathTypeDetail['tags'] = array();						$SwaggerPathTypeDetail['tags'] = $TagArray;					}									$SwaggerPathType[$type]	= $SwaggerPathTypeDetail;				unset($SwaggerPathTypeDetail);													$SwaggerPath[$path] = $SwaggerPathType;				unset($SwaggerPathType);									array_push($Paths, $SwaggerPath);													}			}			foreach ($Paths as $key => $value)			{			$Swagger['paths'] = $value;			}			$DefinitionArray = array();						$SwaggerDefinitionQuery = "SELECT * FROM api_swagger_definitions WHERE API_Swagger_ID = " . $API_Swagger_ID;		//echo $SwaggerPathFieldQuery . "<br />";		$SwaggerDefinitionResults = mysql_query($SwaggerDefinitionQuery) or die('Query failed: ' . mysql_error());				if($SwaggerDefinitionResults && mysql_num_rows($SwaggerDefinitionResults))			{				while ($SwaggerDefinition = mysql_fetch_assoc($SwaggerDefinitionResults))				{				$Definition_ID = $SwaggerDefinition['ID'];					$definition_name = $SwaggerDefinition['name'];								$DefinitionArray[$definition_name] = array();								$DefinitionPropertiesArray['properties'] = array();					$SwaggerDefinitionPropertyQuery = "SELECT * FROM api_swagger_definition_properties WHERE Swagger_Definition_ID = " . $Definition_ID;				//echo $SwaggerDefinitionPropertyQuery . "<br />";				$SwaggerDefinitionPropertyResult = mysql_query($SwaggerDefinitionPropertyQuery) or die('Query failed: ' . mysql_error());								if($SwaggerDefinitionPropertyResult && mysql_num_rows($SwaggerDefinitionPropertyResult))					{						while ($SwaggerDefinitionProperty = mysql_fetch_assoc($SwaggerDefinitionPropertyResult))						{						$Swagger_Definition_Property_ID = $SwaggerDefinitionProperty['ID'];							$property_name = $SwaggerDefinitionProperty['name'];						$property_description = $SwaggerDefinitionProperty['description'];						$property_type = $SwaggerDefinitionProperty['fieldtype'];						$property_format = $SwaggerDefinitionProperty['fieldformat'];													$DefinitionPropertyArray[$property_name] = array();												//if($property_type=='') { $property_type = "string"; }												$C = array();						if($property_type!='') 							{												$C['description'] = $property_description;							}						else							{												$C['description'] = "This is a default description.";							}													if($property_type!='') 							{							$C['type'] = $property_type;							}						else							{							$C['type'] = 'string';							}													$DefinitionPropertyArray[$property_name] = $C;													}					}								$object = new stdClass();					foreach ($DefinitionPropertiesArray as $key => $value)					{					$object = $value;					}														$DefinitionPropertiesArray['properties'] = $DefinitionPropertyArray;							unset($C);													//var_dump($Properties);					//foreach ($DefinitionPropertiesArray as $key => $value)					//{					//$DefinitionPropertiesArray = $value;					//}											$DefinitionArray[$definition_name] = $DefinitionPropertiesArray;								unset($DefinitionPropertiesArray);									}			}				if(count($DefinitionArray)>1)			{			$Swagger['definitions'] = new stdClass();			foreach ($DefinitionArray as $key => $value)				{				//echo $key . " = " . $value;				$Swagger['definitions']->$key = $value;				}			}			$Swagger['definitions'] = $DefinitionArray;				}	$Swagger_JSON = stripslashes(format_json(json_encode($Swagger)));		$export_file_name = PrepareFileName($info_title);	$export_file_name = $export_file_name . "-" . date('Y-m-d-H-i-s') . ".json";			$local_file = "/var/www/html/kin_lane/api/api/temp/" . $export_file_name;		$tmpFile = fopen($local_file, "w") or die("Unable to open file!");	fwrite($tmpFile, $Swagger_JSON);	fclose($tmpFile);			//instantiate the class	$s3 = new S3($awsAccessKey, $awsSecretKey);	$fileName = "kin-lane/stack/api/export/" . $export_file_name;		//echo $awsSiteBucket . "<br />";	//echo $fileName . "<br />";	//echo $fileTempName . "<br />";		//move the file	if ($s3->putObjectFile($local_file, $awsSiteBucket, $fileName, S3::ACL_PUBLIC_READ)) {		//echo "<strong>We successfully uploaded your file.</strong> - " . $awsSiteBucket . " - " . $fileName ;	}else{		//echo "<strong>Something went wrong while uploading your file... sorry.</strong>";	}		$Swagger_Path = $awsRootURL . $fileName;			$ReturnObject['url'] = $Swagger_Path; 		$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));			unlink($local_file);	});		$route = '/api/:api_id/definitions/import/swagger/2.0/';$app->post($route, function ($api_id)  use ($app){	$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);	$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();			$import_date = date('Y-m-d H:i:s');	$import_id = $param['appid'];		$api_definition_url = $param['url'];				$ObjectText = file_get_contents($api_definition_url);	$ObjectResult = json_decode($ObjectText,true);	   		$SwaggerVersion = "2.0";	if(isset($SwaggerInfo['swagger']))		{		$SwaggerVersion = $ObjectResult['swagger'];		}				$SwaggerBasePath = "/";	if(isset($SwaggerInfo['basePath']))		{		$SwaggerBasePath = $ObjectResult['basePath'];		}			$SwaggerResourcePath = "";	if(isset($SwaggerInfo['host']))		{		$SwaggerResourcePath = $ObjectResult['host'];		}				$SwaggerInfo = "";	if(isset($SwaggerInfo['info']))		{		$SwaggerInfo = $ObjectResult['info'];		}					$SwaggerInfo_Version = "";	if(isset($SwaggerInfo['version']))		{		$SwaggerInfo_Version = $SwaggerInfo['version'];		}					$SwaggerInfo_Title = "No Title";	if(isset($SwaggerInfo['title']))		{		$SwaggerInfo_Title = $SwaggerInfo['title'];		}					$SwaggerInfo_Description = "";	if(isset($SwaggerInfo['description']))		{		$SwaggerInfo_Description = $SwaggerInfo['description'];		}				$SwaggerInfo_TermsOfService = "";	if(isset($SwaggerInfo['termsOfService']))		{		$SwaggerInfo_TermsOfService = $SwaggerInfo['termsOfService'];		}		if(isset($SwaggerInfo['contact']))		{		if(isset($SwaggerInfo['contact']['name']))			{			$SwaggerInfo_Contact_Name = $SwaggerInfo['contact']['name'];			}		else			{			$SwaggerInfo_Contact_Name = "";			}		if(isset($SwaggerInfo['contact']['email']))			{			$SwaggerInfo_Contact_Email = $SwaggerInfo['contact']['email'];			}		else			{			$SwaggerInfo_Contact_Email = "";			}		if(isset($SwaggerInfo['contact']['url']))			{			$SwaggerInfo_Contact_URL = $SwaggerInfo['contact']['url'];			}		else			{			$SwaggerInfo_Contact_URL = "";			}					}	else		{		$SwaggerInfo_Contact_Name = "";		$SwaggerInfo_Contact_URL = "";		$SwaggerInfo_Contact_Email = "";		}										if(isset($SwaggerInfo['security']))		{			$SwaggerSecurity = $ObjectResult['security'];		}	else		{			$SwaggerSecurity = "";		}					$SwaggerAPIs = array();	if(isset($ObjectResult['paths']))		{		$SwaggerAPIs = $ObjectResult['paths'];		}				$SwaggerModels = array();	if(isset($ObjectResult['definitions']))		{		$SwaggerModels = $ObjectResult['definitions'];		}	//echo "Title: " . $SwaggerInfo_Title . "<br />";	//echo "Base Path: " . $SwaggerBasePath . "<br />";	//echo "Contact Name: " . $SwaggerInfo_Contact_Name . "<br />";	//cho "Contact URL: " . $SwaggerInfo_Contact_URL . "<br />";		$InsertQuery = "INSERT INTO api_swagger(";		$InsertQuery .= "API_ID,";		$InsertQuery .= "import_date,";	$InsertQuery .= "import_id,";		$InsertQuery .= "swagger,";	$InsertQuery .= "info_title,";	$InsertQuery .= "info_description,";	$InsertQuery .= "info_termsOfService,";		$InsertQuery .= "info_version,";		$InsertQuery .= "info_contact_name,";	$InsertQuery .= "info_contact_url,";	$InsertQuery .= "info_contact_email,";		$InsertQuery .= "host,";	$InsertQuery .= "basePath";		$InsertQuery .= ") VALUES(";		$InsertQuery .= mysql_real_escape_string($api_id) . ",";		$InsertQuery .= "'" . mysql_real_escape_string($import_date) . "',";	$InsertQuery .= "'" . mysql_real_escape_string($import_id) . "',";		$InsertQuery .= "'2.0',";	$InsertQuery .= "'" . mysql_real_escape_string($SwaggerInfo_Title) . "',";	$InsertQuery .= "'" . mysql_real_escape_string($SwaggerInfo_Description) . "',";	$InsertQuery .= "'" . mysql_real_escape_string($SwaggerInfo_TermsOfService) . "',";		$InsertQuery .= "'" . mysql_real_escape_string($SwaggerInfo_Version) . "',";
	$InsertQuery .= "'" . mysql_real_escape_string($SwaggerInfo_Contact_Name) . "',";	$InsertQuery .= "'" . mysql_real_escape_string($SwaggerInfo_Contact_URL) . "',";	$InsertQuery .= "'" . mysql_real_escape_string($SwaggerInfo_Contact_Email) . "',";		$InsertQuery .= "'" . mysql_real_escape_string($SwaggerResourcePath) . "',";	$InsertQuery .= "'" . mysql_real_escape_string($SwaggerBasePath) . "'";	$InsertQuery .= ")";		//echo $InsertQuery . "<br />";	mysql_query($InsertQuery) or die('Query failed: ' . mysql_error());					$api_definition_id = mysql_insert_id();			foreach($SwaggerAPIs as $key => $value)		{			$path = $key;		//echo "<br />Path: " . $path . "<br />";						foreach($value as $key2 => $operation)			{			//var_dump($operation);			$method = $key2;			$type = $method;						$operation_summary = "";			if(isset($operation['summary']))				{				$operation_summary = $operation['summary'];				}										$operation_description = "";			if(isset($operation['description']))				{				$operation_description = $operation['description'];				}			$operation_operationId = PrepareFileName($operation_description);			if(isset($operation['operationId']))				{								$operation_operationId = $operation['operationId'];				}			if($path!='')				{				$SwaggerPathQuery = "SELECT * FROM api_swagger_paths WHERE API_Swagger_ID = " . $api_definition_id . " AND path = '" . $path . "'  AND pathtype = '" . $type . "'";				//echo $SwaggerQuery . "<br />";				$SwaggerPathResults = mysql_query($SwaggerPathQuery) or die('Query failed: ' . mysql_error());								if($SwaggerPathResults && mysql_num_rows($SwaggerPathResults))					{					$SwaggerPath = mysql_fetch_assoc($SwaggerPathResults);							$Swagger_Path_ID = $SwaggerPath['ID'];					}				else 					{												$InsertQuery = "INSERT INTO api_swagger_paths(";										$InsertQuery .= "API_Swagger_ID,";					$InsertQuery .= "path,";					$InsertQuery .= "pathtype,";					$InsertQuery .= "operation_summary,";					$InsertQuery .= "operation_description,";					$InsertQuery .= "operation_operationId";										$InsertQuery .= ") VALUES(";										$InsertQuery .= $api_definition_id . ",";					$InsertQuery .= "'" . $path . "',";					$InsertQuery .= "'" . $type . "',";					$InsertQuery .= "'" . mysql_real_escape_string($operation_summary) . "',";					$InsertQuery .= "'" . mysql_real_escape_string($operation_description) . "',";					$InsertQuery .= "'" . mysql_real_escape_string($operation_operationId) . "'";										$InsertQuery .= ")";					//echo $InsertQuery;					mysql_query($InsertQuery) or die('Query failed: ' . mysql_error());					$Swagger_Path_ID = mysql_insert_id();							}												$parameters = "";				if(isset($operation['parameters']))					{					$parameters = $operation['parameters'];						}								$responseMessages = "";				if(isset($operation['responses']))					{					$responseMessages = $operation['responses'];					}													//echo "dmethod: " . $method . "<br />";						//echo "summary: " . $operation_summary . "<br />";						//echo "notes: " . $notes . "<br />";						//echo "nickname: " . $nickname . "<br />";				//echo "type: " . $type . "<br />";					//var_dump($parameters);				//echo "Here: " . count($parameters) . "<br />";				if(is_array($parameters))					{				foreach($parameters as $parameter)					{											$parameter_name = $parameter['name'];															if(isset($parameter['id']))						{						$parameter_id = $parameter['id'];							}					else 						{
						$parameter_id = PrepareFileName($parameter_name);
						}						if(isset($parameter['description']))						{						$parameter_description = $parameter['description'];							}					else 						{						$parameter_description = "";						}						if(isset($parameter['required']))						{						$parameter_required = $parameter['required'];							}					else 						{						$parameter_required = 0;						}					if($parameter_required==''){ $parameter_required = 0; }																				if(isset($parameter['allowMultiple']))						{						$parameter_allowMultiple = $parameter['allowMultiple'];							}					else 						{						$parameter_allowMultiple = "";						}					if(isset($parameter['dataType']))						{						$parameter_dataType = $parameter['dataType'];							}					else 						{						$parameter_dataType = "";						}					if(isset($parameter['in']))						{						$parameter_paramType = $parameter['in'];							}					else 						{						$parameter_paramType = "query";						}																//echo "id: " . $parameter_id . "<br />";					//echo "name: " . $parameter_name . "<br />";					//echo "description: " . $parameter_description . "<br />";					//echo "required: " . $parameter_required . "<br />";					//echo "allowMultiple: " . $parameter_allowMultiple . "<br />";					//echo "datatype: " . $parameter_dataType . "<br />";					//echo "paramType: " . $parameter_paramType . "<br />";												$SwaggerQuery = "SELECT * FROM api_swagger_path_fields WHERE Swagger_Path_ID = " . $Swagger_Path_ID . " AND name = '" . mysql_real_escape_string($parameter_name) . "' AND fieldin = '" . $parameter_paramType . "'";					//echo $SwaggerQuery . "<br />";					$SwaggerPathFieldsResults = mysql_query($SwaggerQuery) or die('Query failed: ' . mysql_error());										if(mysql_num_rows($SwaggerPathFieldsResults)==0)						{													$InsertQuery = "INSERT INTO api_swagger_path_fields(Swagger_Path_ID,name,fieldin,description,required,fieldtype) VALUES(" . $Swagger_Path_ID . ",'" . mysql_real_escape_string($parameter_name) . "','" . $parameter_paramType . "','" . mysql_real_escape_string($parameter_description) . "'," . $parameter_required . ",'" . $parameter_dataType . "')";						//echo "field:" . $InsertQuery;						mysql_query($InsertQuery) or die('Query failed: ' . mysql_error());							}															}								foreach($responseMessages as $key => $value)					{					//echo $key . "<br />";					//var_dump($value);										$response_code = $key;										$response_description = $value['description'];										if(isset($value['schema']['items']))						{						$response_schema = $value['schema']['items']['$ref'];						//var_dump($response_schema);						}					else						{						$response_schema = "";							}					//echo "code: " . $response_code . "<br />";					//echo "desc: " . $response_description . "<br />";					//echo "schema: " . $response_schema . "<br />";											}					}					}				}					}					// Data Models	if(isset($SwaggerModels))		{		foreach($SwaggerModels as $key => $value)			{							$name = $key;								if(isset( $value['id']))				{				$model_id = $value['id'];						}			else 				{
				$model_id = 0;
				}			//echo "id: " . $model_id . "<br />";			if(isset( $value['properties']))				{							$model_properties = $value['properties'];							$SwaggerDefinitionQuery = "SELECT * FROM api_swagger_definitions WHERE API_Swagger_ID = " . $api_definition_id . " AND name = '" . $name . "'";				//echo $SwaggerDefinitionQuery . "<br />";				$SwaggerDefinitionResults = mysql_query($SwaggerDefinitionQuery) or die('Query failed: ' . mysql_error());				if($SwaggerDefinitionResults && mysql_num_rows($SwaggerDefinitionResults))					{					$SwaggerDefinition = mysql_fetch_assoc($SwaggerDefinitionResults);							$Swagger_Definition_ID = $SwaggerDefinition['ID'];					}				else 					{									$InsertQuery = "INSERT INTO api_swagger_definitions(API_Swagger_ID,name) VALUES(" . $api_definition_id . ",'" . $name . "')";					//echo "def:" .  $InsertQuery;					mysql_query($InsertQuery) or die('Query failed: ' . mysql_error());					$Swagger_Definition_ID = mysql_insert_id();						}														foreach($model_properties as $key => $value)					{					$property_name = $key;										if(isset($value['type']))						{						$property_type = $value['type'];												$SwaggerPropertyQuery = "SELECT * FROM api_swagger_definition_properties WHERE Swagger_Definition_ID = " . $Swagger_Definition_ID . " AND name = '" . $property_name . "'";						//echo $SwaggerPropertyQuery . "<br />";						$SwaggerPropertyResults = mysql_query($SwaggerPropertyQuery) or die('Query failed: ' . mysql_error());												if(mysql_num_rows($SwaggerPropertyResults)==0)							{															$InsertQuery = "INSERT INTO api_swagger_definition_properties(Swagger_Definition_ID,name,fieldtype) VALUES(" . $Swagger_Definition_ID . ",'" . $property_name . "','" . $type . "')";							//echo $InsertQuery;							mysql_query($InsertQuery) or die('Query failed: ' . mysql_error());								}										}					}				}			}																			}	$ReturnObject['version'] = "Import of Swagger 2.0 (" . $api_definition_url . ") successful.";	$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));					});	$route = '/api/:api_id/definitions/code/php/generate/path/parameters/';$app->get($route, function ($api_id)  use ($app){		$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);			$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();		if(isset($_REQUEST['filterpath'])){ $filterpath = $_REQUEST['filterpath']; } else { $filterpath = '';}	if(isset($_REQUEST['filterverb'])){ $filterverb = $_REQUEST['filterverb']; } else { $filterverb = '';}		$Parameters = "";		$DefinitionQuery = "SELECT * FROM api_swagger WHERE API_ID = " . $api_id . " ORDER BY import_date DESC";	//echo $DefinitionQuery . chr(13);	$DefinitionResult = mysql_query($DefinitionQuery) or die('Query failed: ' . mysql_error());		if($DefinitionResult && mysql_num_rows($DefinitionResult))		{								$Definition = mysql_fetch_assoc($DefinitionResult);				$API_Swagger_ID  = $Definition['API_Swagger_ID'];		$swagger = $Definition['swagger'];		$info_title = $Definition['info_title'];		$info_description = $Definition['info_description'];		$info_termsOfService = $Definition['info_termsOfService'];		$info_contact_name = $Definition['info_contact_name'];		$info_contact_url = $Definition['info_contact_url'];		$info_contact_email = $Definition['info_contact_email'];				$info_license_name = $Definition['info_license_name'];		$info_license_url = $Definition['info_license_url'];		$info_version = $Definition['info_version'];		$host = $Definition['host'];		$basePath = $Definition['basePath'];		$schemes = $Definition['schemes'];		$consumes = $Definition['consumes'];		$produces = $Definition['produces'];				$SwaggerPathQuery = "SELECT * FROM api_swagger_paths WHERE API_Swagger_ID = " . $API_Swagger_ID . " ORDER BY path,pathtype";		//echo $SwaggerPathQuery . "<br />";		$SwaggerPathResults = mysql_query($SwaggerPathQuery) or die('Query failed: ' . mysql_error());				if($SwaggerPathResults && mysql_num_rows($SwaggerPathResults))			{				while ($SwaggerPathRow = mysql_fetch_assoc($SwaggerPathResults))				{									$Swagger_Path_ID = $SwaggerPathRow['ID'];					$path = $SwaggerPathRow['path'];				$type = strtolower($SwaggerPathRow['pathtype']);				$operation_summary = $SwaggerPathRow['operation_summary'];				$operation_description = $SwaggerPathRow['operation_description'];				$operation_operationId = $SwaggerPathRow['operation_operationId'];				$schemas = $SwaggerPathRow['pathschemas'];									$tags = $SwaggerPathRow['tags'];								$SwaggerPathFieldQuery = "SELECT * FROM api_swagger_path_fields WHERE Swagger_Path_ID = " . $Swagger_Path_ID . " ORDER BY name";				//echo $SwaggerPathFieldQuery . "<br />";				$SwaggerPathFieldResults = mysql_query($SwaggerPathFieldQuery) or die('Query failed: ' . mysql_error());								if($SwaggerPathFieldResults && mysql_num_rows($SwaggerPathFieldResults))					{											$SwaggerPathTypeDetail['parameters'] = array();													while ($SwaggerPathField = mysql_fetch_assoc($SwaggerPathFieldResults))						{						$Swagger_Path_Field_ID = $SwaggerPathField['ID'];													$field_name = $SwaggerPathField['name'];						$field_in = $SwaggerPathField['fieldin'];												$field_description = $SwaggerPathField['description'];						$field_required = $SwaggerPathField['required'];												$field_type = $SwaggerPathField['fieldtype'];						$field_format = $SwaggerPathField['fieldformat'];																	$field_default = $SwaggerPathField['fielddefault'];													if($filterpath != '')							{							if($filterverb != '')								{								if($path == $filterpath && $type == $filterverb)									{									$Parameters .= chr (36) . $field_name . " = " . chr(36) . "Object['" . $field_name . "'];" . chr(10).chr(13);										}									}								else																{								if($path == $filterpath)									{									$Parameters .= chr (36) . $field_name . " = " . chr(36) . "Object['" . $field_name . "'];" . chr(10).chr(13);										}																		}							}						else 							{
							$Parameters .= chr (36) . $field_name . " = " . chr(36) . "Object['" . $field_name . "'];" . chr(10).chr(13);								
							}						}					}												}			}				}	$ReturnObject['content'] = $Parameters;		$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));			});	$route = '/api/:api_id/definitions/code/php/generate/definition/parameters/';$app->get($route, function ($api_id)  use ($app){		$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);			$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();		if(isset($_REQUEST['filterobject'])){ $filterobject = $_REQUEST['filterobject']; } else { $filterobject = '';}		$Parameters = "";		$DefinitionQuery = "SELECT * FROM api_swagger WHERE API_ID = " . $api_id . " ORDER BY import_date DESC";	//echo $DefinitionQuery . chr(13);	$DefinitionResult = mysql_query($DefinitionQuery) or die('Query failed: ' . mysql_error());		if($DefinitionResult && mysql_num_rows($DefinitionResult))		{								$Definition = mysql_fetch_assoc($DefinitionResult);				$API_Swagger_ID  = $Definition['API_Swagger_ID'];		$swagger = $Definition['swagger'];		$info_title = $Definition['info_title'];		$info_description = $Definition['info_description'];		$info_termsOfService = $Definition['info_termsOfService'];		$info_contact_name = $Definition['info_contact_name'];		$info_contact_url = $Definition['info_contact_url'];		$info_contact_email = $Definition['info_contact_email'];				$info_license_name = $Definition['info_license_name'];		$info_license_url = $Definition['info_license_url'];		$info_version = $Definition['info_version'];		$host = $Definition['host'];		$basePath = $Definition['basePath'];		$schemes = $Definition['schemes'];		$consumes = $Definition['consumes'];		$produces = $Definition['produces'];				$SwaggerDefinitionQuery = "SELECT * FROM api_swagger_definitions WHERE API_Swagger_ID = " . $API_Swagger_ID;		//echo $SwaggerDefinitionQuery . "<br />";		$SwaggerDefinitionResults = mysql_query($SwaggerDefinitionQuery) or die('Query failed: ' . mysql_error());				if($SwaggerDefinitionResults && mysql_num_rows($SwaggerDefinitionResults))			{				while ($SwaggerDefinition = mysql_fetch_assoc($SwaggerDefinitionResults))				{				$Definition_ID = $SwaggerDefinition['ID'];					$definition_name = $SwaggerDefinition['name'];							//echo $definition_name;				$DefinitionArray[$definition_name] = array();								$DefinitionPropertiesArray['properties'] = array();					$SwaggerDefinitionPropertyQuery = "SELECT * FROM api_swagger_definition_properties WHERE Swagger_Definition_ID = " . $Definition_ID;				//echo $SwaggerDefinitionPropertyQuery . "<br />";				$SwaggerDefinitionPropertyResult = mysql_query($SwaggerDefinitionPropertyQuery) or die('Query failed: ' . mysql_error());								if($SwaggerDefinitionPropertyResult && mysql_num_rows($SwaggerDefinitionPropertyResult))					{						while ($SwaggerDefinitionProperty = mysql_fetch_assoc($SwaggerDefinitionPropertyResult))						{						$Swagger_Definition_Property_ID = $SwaggerDefinitionProperty['ID'];							$property_name = $SwaggerDefinitionProperty['name'];						$property_description = $SwaggerDefinitionProperty['description'];						$property_type = $SwaggerDefinitionProperty['fieldtype'];						$property_format = $SwaggerDefinitionProperty['fieldformat'];													if($filterobject != '')							{							//echo $definition_name . " = " . $filterobject . ""							if($definition_name == $filterobject)								{								$Parameters .= chr (36) . $property_name . " = " . chr(36) . "Object['" . $property_name . "'];";								}																	}						else 							{							$Parameters .= chr (36) . $property_name . " = " . chr(36) . "Object['" . $property_name . "'];";															}												}					}										}			}			}	$ReturnObject['content'] = $Parameters;		$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));			});		$route = '/api/:api_id/definitions/export/apisjson/.14/';	;$app->get($route, function ($api_id)  use ($app){		$host = $_SERVER['HTTP_HOST'];			$api_id = decrypt($api_id,$host);			$ReturnObject = array();		 	$request = $app->request();  	$param = $request->params();		if(isset($param['filterobject'])){ $filterobject = $param['filterobject']; } else { $filterobject = '';}		$Company_Count = 0;	$Write_APIS_JSON_File = 0;		$GetCompanyQuery = "SELECT DISTINCT c.Company_ID,c.Name,c.Details,c.Twitter_Bio,c.Bio FROM company c JOIN company_api_pivot cap ON c.Company_ID = cap.Company_ID WHERE cap.API_ID = " . $api_id . " ORDER BY c.Name ASC;";	//echo $GetCompanyQuery . "<br />";	$GetCompanyResult = mysql_query($GetCompanyQuery) or die('Query failed: ' . mysql_error());				if($GetCompanyResult && mysql_num_rows($GetCompanyResult))		{			while ($Company = mysql_fetch_assoc($GetCompanyResult))			{			$Company_ID = $Company['Company_ID'];						$Company_Name = $Company['Name'];			echo $Company_Name . "<br />";													$Company_Name_Slug = PrepareFileName($Company_Name);						$API_JSON_URL = "http://theapistack.com/" . $Company_Name_Slug . "/apis.json";						$Body = $Company['Details'];																	$Body = str_replace(chr(34),"",$Body);			$Body = str_replace(chr(39),"",$Body);			$Body = strip_tags($Body);			$Body = mysql_real_escape_string($Body);						// Add Company As Include in Master APIs.json			$APIJSON_Include = array();			$APIJSON_Include['name'] = $Company_Name;			$APIJSON_Include['url'] = $API_JSON_URL;								// Logo Image			$Logo_Image_Width = 0;			$Company_Image_ID = 0;								$LogoImageQuery = "SELECT Company_Image_ID, Image_Path,Width FROM company_image WHERE Type = 'logo' AND Company_ID = " . $Company_ID . " ORDER BY Company_Image_ID DESC LIMIT 1";			//echo $LogoImageQuery . "<br />";			$LogoImageResult = mysql_query($LogoImageQuery) or die('Query failed: ' . mysql_error());									while ($LogoImage = mysql_fetch_assoc($LogoImageResult))				{				$Company_Image_ID = $LogoImage['Company_Image_ID'];										$Logo_Image_Path = $LogoImage['Image_Path'];				$Logo_Image_Width = $LogoImage['Width'];						}															// Begin Individual APIs.json			$APIJSON = array();			$APIJSON['name'] = trim($Company_Name);			$APIJSON['description'] = trim($Body);			$APIJSON['image'] = trim($Logo_Image_Path);						// Maange the API.json Tags			$Tags = array();			$Tag =  array('api');			array_push($Tags, $Tag);							$Tag =  array('application programming interfaces');			array_push($Tags, $Tag);						$Tags = array();				$TagQuery = "SELECT DISTINCT t.Tag FROM tags t JOIN company_tag_pivot ctp ON t.Tag_ID = ctp.Tag_ID WHERE ctp.Company_ID = " . $Company_ID . " AND t.Tag NOT LIKE '%-Stack' ORDER BY t.Tag";			//echo $TagQuery;			$TagResult = mysql_query($TagQuery) or die('Query failed: ' . mysql_error());			$rowcount = 1;			while ($ThisTag = mysql_fetch_assoc($TagResult))				{				$Tag = strtolower($ThisTag['Tag']);				array_push($Tags, $Tag);				}																									$APIJSON['tags'] = $Tags;										$APIJSON['created'] = date('Y-m-d');			$APIJSON['modified'] = date('Y-m-d');							$APIJSON['url'] = $API_JSON_URL;			$APIJSON['specificationVersion'] = "0.14";							$APIJSON['apis'] = array();				// Begin APIs									$APIQuery = "SELECT * FROM api WHERE Company_ID = " . $Company_ID . " ORDER BY Name";			//echo $TagQuery;			$APIResult = mysql_query($APIQuery) or die('Query failed: ' . mysql_error());			$rowcount = 1;						if($APIResult && mysql_num_rows($APIResult))				{									while ($API = mysql_fetch_assoc($APIResult))					{					$api_id = $API['API_ID'];					$API_Name = $API['Name'];					$API_About = $API['About'];														$API_About = str_replace(chr(34),"",$API_About);					$API_About = str_replace(chr(39),"",$API_About);					$API_About = strip_tags($API_About);					$API_About = mysql_real_escape_string($API_About);																					$API = array();					$API['name'] = $API_Name;					$API['description'] = $API_About;					$API['image'] = trim($Logo_Image_Path);										// Website						$API_Website_URL = "";					$query = "SELECT URL FROM api_url WHERE API_ID = " . $api_id . " AND Type = 'Website'";					$linkResult = mysql_query($query) or die('Query failed: ' . mysql_error());					if($linkResult && mysql_num_rows($linkResult))						{							while ($link = mysql_fetch_assoc($linkResult))							{							$API_Website_URL = $link['URL'];							}						}										$API['humanURL'] = trim($API_Website_URL);															// Base URL					$API_Base_URL = "";					$query = "SELECT URL FROM api_url WHERE API_ID = " . $api_id . " AND Type = 'BaseURL'";					$linkResult = mysql_query($query) or die('Query failed: ' . mysql_error());					if($linkResult && mysql_num_rows($linkResult))						{							while ($link = mysql_fetch_assoc($linkResult))							{							$API_Base_URL = $link['URL'];							}						}																														if($API_Base_URL!='')						{						$API['baseURL'] = trim($API_Base_URL);						}									else										{						$API['baseURL'] = trim($API_Website_URL);						}					// Begin API Tags					$API_Tags = array();						$TagQuery = "SELECT DISTINCT t.Tag FROM tags t JOIN api_tag_pivot atp ON t.Tag_ID = atp.Tag_ID WHERE atp.API_ID = " . $api_id . " AND t.Tag NOT LIKE '%-Stack' ORDER BY t.Tag";					//echo $TagQuery;					$TagResult = mysql_query($TagQuery) or die('Query failed: ' . mysql_error());					$rowcount = 1;					while ($ThisTag = mysql_fetch_assoc($TagResult))						{						$Tag = strtolower($ThisTag['Tag']);						array_push($API_Tags, $Tag);						}															$API['tags'] = $API_Tags;					// End API Tags											$API['properties'] = array();										$CompanyURLQuery = "SELECT * FROM company_url WHERE Company_ID = " . $Company_ID . " ORDER BY Name, Type";					//echo $CompanyURLQuery . "<br />";					$CompanyURLResult = mysql_query($CompanyURLQuery) or die('Query failed: ' . mysql_error());																	while ($CompanyURL = mysql_fetch_assoc($CompanyURLResult))						{						$Company_URL_ID = $CompanyURL['Company_URL_ID'];												$API_URL = $CompanyURL['URL'];						$API_URL_Name = $CompanyURL['Name'];						$API_URL_Type = $CompanyURL['Type'];												$API_Building_Block_ID = $CompanyURL['Building_Block_ID'];						//echo "API Building Block ID: " . $API_Building_Block_ID . "<br />";						//echo "API URL Name: " . $API_URL_Name . "<br />";												$API_Building_Block_Name = "";						$API_Building_Block_Description = "";						$API_Building_Block_Icon = "";												if($API_Building_Block_ID>0)							{															$Building_Block_Query = "SELECT Building_Block_ID, bb.Name AS Building_Block_Name, bb.About, bbc.Name AS Building_Block_Category_Name, bbc.Type as Type FROM building_block bb JOIN building_block_category bbc ON bb.Building_Block_Category_ID = bbc.BuildingBlockCategory_ID WHERE Building_Block_ID = " . $API_Building_Block_ID;							//echo $Building_Block_Query . "<br />";								$Building_Block_Result = mysql_query($Building_Block_Query) or die('Query failed: ' . mysql_error());								if($Building_Block_Result && mysql_num_rows($Building_Block_Result))								{								$HaveBuildingBlock = 1;								$Building_Block = mysql_fetch_assoc($Building_Block_Result);								$Building_Block_Image_Query = "SELECT Image_Name,Image_Path FROM building_block_image WHERE Image_Path <> '' AND Building_Block_ID = " . $API_Building_Block_ID . " ORDER BY Building_Block_Image_ID DESC";								$Building_Block_Image_Result = mysql_query($Building_Block_Image_Query) or die('Query failed: ' . mysql_error());								while ($Building_Block_Image = mysql_fetch_assoc($Building_Block_Image_Result))									{									$API_Building_Block_Icon = $Building_Block_Image['Image_Path'];														}																										$API_Building_Block_Name = $Building_Block['Building_Block_Name'];								//echo "Building Block Name: " . $API_Building_Block_Name . "<br />";								$API_Building_Block_Description = $Building_Block['About'];																									}								$API_URL_Type_Slug = PrepareFileName($API_Building_Block_Name);							$Link = array();							$Link['type'] = "X-" . $API_URL_Type_Slug;							$Link['url'] = trim($API_URL);							array_push($API['properties'], $Link);											}						}												$CompanyURLQuery = "SELECT API_URL_ID,URL FROM api_url WHERE API_ID = " . $api_id . " AND Type = 'Swagger'";					//echo $CompanyURLQuery . "<br />";					$CompanyURLResult = mysql_query($CompanyURLQuery) or die('Query failed: ' . mysql_error());																	while ($CompanyURL = mysql_fetch_assoc($CompanyURLResult))						{						$API_URL_ID = $CompanyURL['API_URL_ID'];													$API_URL = $CompanyURL['URL'];									$Link = array();						$Link['type'] = "Swagger";						$Link['url'] = trim($API_URL);						array_push($API['properties'], $Link);						}																																// Twitter						$Company_API_Twitter = "";					$query = "SELECT Company_URL_ID,Type,URL FROM company_url WHERE Company_ID = " . $Company_ID . " AND Type = 'Twitter'";					$linkResult = mysql_query($query) or die('Query failed: ' . mysql_error());					if($linkResult && mysql_num_rows($linkResult))						{							while ($link = mysql_fetch_assoc($linkResult))							{							$Company_API_Twitter = $link['URL'];							}						}											// Email						$Company_API_Email = "";					$query = "SELECT Company_URL_ID,Type,URL FROM company_url WHERE Company_ID = " . $Company_ID . " AND Type = 'Email'";					$linkResult = mysql_query($query) or die('Query failed: ' . mysql_error());					if($linkResult && mysql_num_rows($linkResult))						{							while ($link = mysql_fetch_assoc($linkResult))							{							$Company_API_Email = $link['URL'];							}						}																																			$API['contact'] = array();							$Contact = array();					$Contact['FN'] = $API_Name;					if($Company_API_Email!='')						{						$Contact['email'] = $Company_API_Email;						}											if($Company_API_Twitter!='')						{						$Contact['X-twitter'] = $Company_API_Twitter;						}									array_push($API['contact'], $Contact);										// End Each API					// Append					array_push($APIJSON['apis'], $API);						}				$APIJSON['maintainers'] = array();						$Maintainer = array();				$Maintainer['FN'] = "Kin";				$Maintainer['X-twitter'] = "apievangelist";				$Maintainer['email'] = "kin@email.com";						array_push($APIJSON['maintainers'], $Maintainer);									$ReturnEachAPIJSON = stripslashes(format_json(json_encode($APIJSON)));				$API_JSON_Store_File = "data/" . $Company_Name_Slug . "/apis.json";								$Public_APIs_JSON = $Project_Subdomain . "/" . $API_JSON_Store_File;				$GitHubClient = new GitHubClient();				$GitHubClient->setCredentials($GUserName, $GUserPass);								$owner = 'kinlane';								$ref = "gh-pages";								try					{								$CheckFile = $GitHubClient->repos->contents->getContents($owner, $Project_Github_Repo, $ref, $API_JSON_Store_File);										$name = $CheckFile->getname();					$content = base64_decode($CheckFile->getcontent());					$sha = $CheckFile->getsha();										$message = "Updating " . $API_JSON_Store_File . " via Laneworks Publish";					$content = base64_encode($ReturnEachAPIJSON);										echo "Message: " . $message . "<br />";							$updateFile = $GitHubClient->repos->contents->updateFile($owner, $Project_Github_Repo, $API_JSON_Store_File, $message, $content, $sha, $ref);					//var_dump($updateFile);									}				catch (Exception $e)					{										$message = "Adding " . $API_JSON_Store_File . " via Laneworks Publish";					$content = base64_encode($ReturnEachAPIJSON);										echo "Message: " . $message . "<br />";										//echo $Data_Store_File . "<br />";							$updateFile = $GitHubClient->repos->contents->createFile($owner, $Project_Github_Repo, $API_JSON_Store_File, $message, $content, $ref);					//var_dump($updateFile);																}										$UpdateQuery = "UPDATE company SET Stack_Update = 1 WHERE Company_ID = " . $Company_ID;				$UpdateResult = mysql_query($UpdateQuery) or die('Query failed: ' . mysql_error());																													$LinkQuery = "SELECT * FROM company_url WHERE Company_ID = " . $Company_ID . " AND URL = '" . $Public_APIs_JSON . "' AND Type = 'APIs.json'";				//echo $LinkQuery . "<br />";				$LinkResult = mysql_query($LinkQuery) or die('Query failed: ' . mysql_error());								if($LinkResult && mysql_num_rows($LinkResult))					{						$Link = mysql_fetch_assoc($LinkResult);						}				else 					{					$query = "INSERT INTO company_url(Company_ID,URL,Type) VALUES(" . mysql_real_escape_string($Company_ID) . ",'" . mysql_real_escape_string($Public_APIs_JSON) . "','APIs.json')";					//echo $query . "<br />";					mysql_query($query) or die('Query failed: ' . mysql_error());								}													}				else 				{				// Website					$Website_URL = "";				$query = "SELECT Company_URL_ID,Type,URL FROM company_url WHERE Company_ID = " . $Company_ID . " AND Type = 'Website'";				$linkResult = mysql_query($query) or die('Query failed: ' . mysql_error());				if($linkResult && mysql_num_rows($linkResult))					{						while ($link = mysql_fetch_assoc($linkResult))						{						$Website_URL = $link['URL'];						}					}									// Email					$Email_Address = "";				$query = "SELECT Company_URL_ID,Type,URL FROM company_url WHERE Company_ID = " . $Company_ID . " AND Type = 'Email'";				$linkResult = mysql_query($query) or die('Query failed: ' . mysql_error());				if($linkResult && mysql_num_rows($linkResult))					{						while ($link = mysql_fetch_assoc($linkResult))						{						$Email_Address = $link['URL'];						}					}																// Twitter					$Twitter_URL = "";				$query = "SELECT Company_URL_ID,Type,URL FROM company_url WHERE Company_ID = " . $Company_ID . " AND Type = 'Twitter'";				$linkResult = mysql_query($query) or die('Query failed: ' . mysql_error());				if($linkResult && mysql_num_rows($linkResult))					{						while ($link = mysql_fetch_assoc($linkResult))						{						$Twitter_URL = $link['URL'];						}					}										// Blog				$Blog_URL = "";					$query = "SELECT Company_URL_ID,Type,URL FROM company_url WHERE Company_ID = " . $Company_ID . " AND Type = 'Blog'";				$linkResult = mysql_query($query) or die('Query failed: ' . mysql_error());				if($linkResult && mysql_num_rows($linkResult))					{						while ($link = mysql_fetch_assoc($linkResult))						{						$Blog_URL = $link['URL'];						}					}							// Blog RSS					$Blog_RSS_URL = "";				$query = "SELECT Company_URL_ID,Type,URL FROM company_url WHERE Company_ID = " . $Company_ID . " AND Type = 'Blog RSS'";				$linkResult = mysql_query($query) or die('Query failed: ' . mysql_error());				if($linkResult && mysql_num_rows($linkResult))					{						while ($link = mysql_fetch_assoc($linkResult))						{						$Blog_RSS_URL = $link['URL'];						}					}				$Blog_RSS_URL = str_replace("view-source:","",$Blog_RSS_URL);				$Blog_RSS_URL = str_replace("feed://","http://",$Blog_RSS_URL);																// Blog RSS					$Github_URL = "";				$query = "SELECT Company_URL_ID,Type,URL FROM company_url WHERE Company_ID = " . $Company_ID . " AND Type = 'Github'";				$linkResult = mysql_query($query) or die('Query failed: ' . mysql_error());				if($linkResult && mysql_num_rows($linkResult))					{						while ($link = mysql_fetch_assoc($linkResult))						{						$Github_URL = $link['URL'];						}					}									// Base URL				$Base_URL = "";				$query = "SELECT Company_URL_ID,Type,URL FROM company_url WHERE Company_ID = " . $Company_ID . " AND Type = 'BaseURL'";				$linkResult = mysql_query($query) or die('Query failed: ' . mysql_error());				if($linkResult && mysql_num_rows($linkResult))					{						while ($link = mysql_fetch_assoc($linkResult))						{						$Base_URL = $link['URL'];						}					}																		// Base URL				$Developer_URL = "";				$query = "SELECT Company_URL_ID,Type,URL FROM company_url WHERE Company_ID = " . $Company_ID . " AND Type = 'Developer'";				$linkResult = mysql_query($query) or die('Query failed: ' . mysql_error());				if($linkResult && mysql_num_rows($linkResult))					{						while ($link = mysql_fetch_assoc($linkResult))						{						$Developer_URL = $link['URL'];						}					}																										$Tags = array();					$TagQuery = "SELECT DISTINCT t.Tag FROM tags t JOIN company_tag_pivot ctp ON t.Tag_ID = ctp.Tag_ID WHERE ctp.Company_ID = " . $Company_ID . " AND t.Tag NOT LIKE '%-Stack' ORDER BY t.Tag";				//echo $TagQuery;				$TagResult = mysql_query($TagQuery) or die('Query failed: ' . mysql_error());				$rowcount = 1;				while ($ThisTag = mysql_fetch_assoc($TagResult))					{					$Tag = strtolower($ThisTag['Tag']);					array_push($Tags, $Tag);					}									$API = array();				$API['name'] = $Company_Name;				$API['description'] = $Body;				$API['image'] = trim($Logo_Image_Path);				$API['humanURL'] = trim($Website_URL);												if($Base_URL!='')					{					$API['baseURL'] = trim($Base_URL);					}				elseif($Developer_URL!='' && $Base_URL == '')									{					$API['baseURL'] = trim($Developer_URL);					}									else									{					$API['baseURL'] = trim($Website_URL);					}													$API['tags'] = $Tags;				$API['properties'] = array();							    if($Twitter_URL!='')					{					$Link = array();					$Link['type'] = "X-twitter";					$Link['url'] = trim($Twitter_URL);					array_push($API['properties'], $Link);					}								    if($Blog_URL!='')					{					$Link = array();					$Link['type'] = "X-blog";					$Link['url'] = trim($Blog_URL);					array_push($API['properties'], $Link);					}									    if($Blog_RSS_URL!='')					{					$Link = array();					$Link['type'] = "X-blogrss";					$Link['url'] = trim($Blog_RSS_URL);					array_push($API['properties'], $Link);					}			    if($Github_URL!='')					{					$Link = array();					$Link['type'] = "X-github";					$Link['url'] = trim($Github_URL);					array_push($API['properties'], $Link);					}											    if($Developer_URL!='')					{					$Link = array();					$Link['type'] = "X-developer-portal";					$Link['url'] = trim($Developer_URL);					array_push($API['properties'], $Link);					}														$API['contact'] = array();						$Contact = array();				$Contact['FN'] = $Company_Name;				if($Email_Address!='')					{					$Contact['email'] = $Email_Address;					}										if($Twitter_URL!='')					{					$Contact['X-twitter'] = $Twitter_URL;					}								array_push($API['contact'], $Contact);								// End Each API				// Append				array_push($APIJSON['apis'], $API);										$APIJSON['maintainers'] = array();						$Maintainer = array();				$Maintainer['FN'] = "Kin";				$Maintainer['X-twitter'] = "apievangelist";				$Maintainer['email'] = "kin@email.com";						array_push($APIJSON['maintainers'], $Maintainer);									$ReturnEachAPIJSON = stripslashes(format_json(json_encode($APIJSON)));																											}			}		}		$ReturnObject = $ReturnEachAPIJSON;	$Parameters = "nothing";	$ReturnObject['content'] = $Parameters;		$app->response()->header("Content-Type", "application/json");	echo stripslashes(format_json(json_encode($ReturnObject)));			});		// 		// End Definitions		//		$route = '/api/swagger/codegen/libraries/';	;$app->get($route, function ()  use ($app,$awsAccessKey,$awsSecretKey,$awsRootURL,$awsSiteBucket){		$ReturnObject = array();		$ReturnObject['code-libraries'] = array();	$ReturnObject['code-libraries']['php'] = array();	$ReturnObject['code-libraries']['python'] = array();	$ReturnObject['code-libraries']['ruby'] = array();		 	$request = $app->request();  	$param = $request->params();		if(isset($param['url'])){ $url = $param['url']; } else { $url = '';}	//echo $url . "<br />";		$s3 = new S3($awsAccessKey, $awsSecretKey);					$folder = $url;	$folder = str_replace("http://","",$folder);	$folder = str_replace("https://","",$folder);	$folder = str_replace("/"," ",$folder);	$folder = str_replace("."," ",$folder);	$folder = PrepareFileName($folder);		if(substr($folder, 0,1)=="-"){ $folder = substr($folder, 0,strlen($folder)-1); }	if(substr($folder, 0,1)=="-"){ $folder = substr($folder, 0,strlen($folder)-1); }	if(substr($folder, 0,1)=="-"){ $folder = substr($folder, 0,strlen($folder)-1); }		$Swagger_Store = file_get_contents($url);	$export_file_name = $folder . ".json";	$local_file = "/var/www/html/kin_lane/api/temp/" . $export_file_name;		$tmpFile = fopen($local_file, "w") or die("Unable to open file!");	fwrite($tmpFile, $Swagger_Store);	fclose($tmpFile);			$fileName = "api-evangelist-site/codegen/swagger-backup/" . $export_file_name;	if ($s3->putObjectFile($local_file, $awsSiteBucket, $fileName, S3::ACL_PUBLIC_READ)) { }else{ }	$publishfolder = "/var/www/html/kin_lane/api/temp/" . $folder . "/";	//echo $publishfolder . "<br />";		// PHP	$command = "java -jar /var/www/html/kin_lane/api/swagger-codegen/modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i " . $url . " -l php -o " . $publishfolder . "php";	//echo $command . "<br />";	$output = shell_exec($command);	//echo $output . "<br />";		// Python	$command = "java -jar /var/www/html/kin_lane/api/swagger-codegen/modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i " . $url . " -l python -o " . $publishfolder . "python";	//echo $command . "<br />";	$output = shell_exec($command);	//echo $output . "<br />";			// Ruby	$command = "java -jar /var/www/html/kin_lane/api/swagger-codegen/modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i " . $url . " -l ruby -o " . $publishfolder . "ruby";	//echo $command . "<br />";	$output = shell_exec($command);	//echo $output . "<br />";				// Java	$command = "java -jar /var/www/html/kin_lane/api/swagger-codegen/modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i " . $url . " -l java -o " . $publishfolder . "java";	//echo $command . "<br />";	$output = shell_exec($command);	//echo $output . "<br />";			// C#	$command = "java -jar /var/www/html/kin_lane/api/swagger-codegen/modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i " . $url . " -l csharp -o " . $publishfolder . "csharp";	//echo $command . "<br />";	$output = shell_exec($command);	//echo $output . "<br />";				// Objective-C	$command = "java -jar /var/www/html/kin_lane/api/swagger-codegen/modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i " . $url . " -l objc -o " . $publishfolder . "objc";	//echo $command . "<br />";	$output = shell_exec($command);	//echo $output . "<br />";				// Objective-C	$command = "java -jar /var/www/html/kin_lane/api/swagger-codegen/modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i " . $url . " -l android -o " . $publishfolder . "android";	//echo $command . "<br />";	$output = shell_exec($command);	//echo $output . "<br />";				// HTML	//$command = "java -jar /var/www/html/kin_lane/api/swagger-codegen/modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i " . $url . " -l html -o " . $publishfolder . "html";	//echo $command . "<br />";	//$output = shell_exec($command);	//echo $output . "<br />";			$tempfolder = "/var/www/html/kin_lane/api/temp/";		// PHP 	$language = "php";	$zipfolder = $tempfolder . $folder . "/" . $language . "/";	$zipfile = $folder . "-" . $language . ".zip";	$zipfilepath = $tempfolder . $zipfile;	$include_dir = true;		$fileName = "api-evangelist-site/codegen/" . $folder . "-" . $language . ".zip";		$zipresult = zipIt($zipfolder, $zipfilepath, false, array('.DS_Store'));	if ($s3->putObjectFile($zipfilepath, $awsSiteBucket, $fileName, S3::ACL_PUBLIC_READ)) { }else{ }		$zip_path = $awsRootURL . $fileName;			$F = array();	$F['icon-url'] = "https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-" . $language . "-file.png";			$F['zip-url'] = $zip_path;						$ReturnObject['code-libraries'][$language] = $F;	$command = "rm -rf " . $zipfilepath;	$output = shell_exec($command);					// Python 	$language = "python";	$zipfolder = $tempfolder . $folder . "/" . $language . "/";	$zipfile = $folder . "-" . $language . ".zip";	$zipfilepath = $tempfolder . $zipfile;	$include_dir = true;		$fileName = "api-evangelist-site/codegen/" . $folder . "-" . $language . ".zip";		$zipresult = zipIt($zipfolder, $zipfilepath, false, array('.DS_Store'));	if ($s3->putObjectFile($zipfilepath, $awsSiteBucket, $fileName, S3::ACL_PUBLIC_READ)) { }else{ }		$zip_path = $awsRootURL . $fileName;			$F = array();	$F['icon-url'] = "https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-" . $language . "-file.png";			$F['zip-url'] = $zip_path;						$ReturnObject['code-libraries'][$language] = $F;	$command = "rm -rf " . $zipfilepath;	$output = shell_exec($command);				// Ruby 	$language = "ruby";	$zipfolder = $tempfolder . $folder . "/" . $language . "/";	$zipfile = $folder . "-" . $language . ".zip";	$zipfilepath = $tempfolder . $zipfile;	$include_dir = true;		$fileName = "api-evangelist-site/codegen/" . $folder . "-" . $language . ".zip";		$zipresult = zipIt($zipfolder, $zipfilepath, false, array('.DS_Store'));	if ($s3->putObjectFile($zipfilepath, $awsSiteBucket, $fileName, S3::ACL_PUBLIC_READ)) { }else{ }		$zip_path = $awsRootURL . $fileName;			$F = array();	$F['icon-url'] = "https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-" . $language . "-file.png";			$F['zip-url'] = $zip_path;						$ReturnObject['code-libraries'][$language] = $F;		$command = "rm -rf " . $zipfilepath;	$output = shell_exec($command);				// Java 	$language = "java";	$zipfolder = $tempfolder . $folder . "/" . $language . "/";	$zipfile = $folder . "-" . $language . ".zip";	$zipfilepath = $tempfolder . $zipfile;	$include_dir = true;		$fileName = "api-evangelist-site/codegen/" . $folder . "-" . $language . ".zip";		$zipresult = zipIt($zipfolder, $zipfilepath, false, array('.DS_Store'));	if ($s3->putObjectFile($zipfilepath, $awsSiteBucket, $fileName, S3::ACL_PUBLIC_READ)) { }else{ }		$zip_path = $awsRootURL . $fileName;			$F = array();	$F['icon-url'] = "https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-" . $language . "-file.png";			$F['zip-url'] = $zip_path;						$ReturnObject['code-libraries'][$language] = $F;	$command = "rm -rf " . $zipfilepath;	$output = shell_exec($command);								// csharp 	$language = "csharp";	$zipfolder = $tempfolder . $folder . "/" . $language . "/";	$zipfile = $folder . "-" . $language . ".zip";	$zipfilepath = $tempfolder . $zipfile;	$include_dir = true;		$fileName = "api-evangelist-site/codegen/" . $folder . "-" . $language . ".zip";		$zipresult = zipIt($zipfolder, $zipfilepath, false, array('.DS_Store'));	if ($s3->putObjectFile($zipfilepath, $awsSiteBucket, $fileName, S3::ACL_PUBLIC_READ)) { }else{ }		$zip_path = $awsRootURL . $fileName;			$F = array();	$F['icon-url'] = "https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-" . $language . "-file.png";			$F['zip-url'] = $zip_path;						$ReturnObject['code-libraries'][$language] = $F;		$command = "rm -rf " . $zipfilepath;	$output = shell_exec($command);				// objc 	$language = "objc";	$zipfolder = $tempfolder . $folder . "/" . $language . "/";	$zipfile = $folder . "-" . $language . ".zip";	$zipfilepath = $tempfolder . $zipfile;	$include_dir = true;		$fileName = "api-evangelist-site/codegen/" . $folder . "-" . $language . ".zip";		$zipresult = zipIt($zipfolder, $zipfilepath, false, array('.DS_Store'));	if ($s3->putObjectFile($zipfilepath, $awsSiteBucket, $fileName, S3::ACL_PUBLIC_READ)) { }else{ }		$zip_path = $awsRootURL . $fileName;			$F = array();	$F['icon-url'] = "https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-" . $language . "-file.png";			$F['zip-url'] = $zip_path;						$ReturnObject['code-libraries'][$language] = $F;	$command = "rm -rf " . $zipfilepath;	$output = shell_exec($command);			// android-java 	$language = "android";	$zipfolder = $tempfolder . $folder . "/" . $language . "/";	$zipfile = $folder . "-" . $language . ".zip";	$zipfilepath = $tempfolder . $zipfile;	$include_dir = true;		$fileName = "api-evangelist-site/codegen/" . $folder . "-" . $language . ".zip";		$zipresult = zipIt($zipfolder, $zipfilepath, false, array('.DS_Store'));	if ($s3->putObjectFile($zipfilepath, $awsSiteBucket, $fileName, S3::ACL_PUBLIC_READ)) { }else{ }		$zip_path = $awsRootURL . $fileName;			$F = array();	$F['icon-url'] = "https://s3.amazonaws.com/kinlane-productions/bw-icons/bw-" . $language . "-file.png";			$F['zip-url'] = $zip_path;						$ReturnObject['code-libraries'][$language] = $F;		$command = "rm -rf " . $zipfilepath;	$output = shell_exec($command);					// Clean House	$cleanfolder = $tempfolder . $folder . "/";	$command = "rm -rf " . $cleanfolder;	$output = shell_exec($command);															$app->response()->header("Content-Type", "application/json");	echo format_json(json_encode($ReturnObject));						});		?>