<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

namespace SwaggerClient;

class APIApi {

  function __construct($apiClient) {
    $this->apiClient = $apiClient;
  }

  
  /**
   * getAPIs
   *
   * retrieves all apis
   *
   * @param string $appid your appid for accessing the API (required)
   * @param string $appkey your appkey for accessing the API (required)
   * @param string $query a text query to search across APIs (required)
   * @return array[api]
   */
   public function getAPIs($appid, $appkey, $query) {

      // parse inputs
      $resourcePath = "/api/";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($appid !== null) {
        $queryParams['appid'] = $this->apiClient->toQueryValue($appid);
      }// query params
      if($appkey !== null) {
        $queryParams['appkey'] = $this->apiClient->toQueryValue($appkey);
      }// query params
      if($query !== null) {
        $queryParams['query'] = $this->apiClient->toQueryValue($query);
      }
      
      
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      }
      
      // for HTTP post (form)
      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") !== FALSE) {
        $httpBody = http_build_query($formParams);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[api]');
  		return $responseObject;
  }
  
  /**
   * addAPI
   *
   * add api
   *
   * @param string $appid your appid for accessing the API (required)
   * @param string $appkey your appkey for accessing the API (required)
   * @param string $name name of the API (required)
   * @param string $about details about the API (required)
   * @param string $rank ranking of API (required)
   * @param string $organization_id organization ID for the API (required)
   * @return array[api]
   */
   public function addAPI($appid, $appkey, $name, $about, $rank, $organization_id) {

      // parse inputs
      $resourcePath = "/api/";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "POST";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($appid !== null) {
        $queryParams['appid'] = $this->apiClient->toQueryValue($appid);
      }// query params
      if($appkey !== null) {
        $queryParams['appkey'] = $this->apiClient->toQueryValue($appkey);
      }// query params
      if($name !== null) {
        $queryParams['name'] = $this->apiClient->toQueryValue($name);
      }// query params
      if($about !== null) {
        $queryParams['about'] = $this->apiClient->toQueryValue($about);
      }// query params
      if($rank !== null) {
        $queryParams['rank'] = $this->apiClient->toQueryValue($rank);
      }// query params
      if($organization_id !== null) {
        $queryParams['organization_id'] = $this->apiClient->toQueryValue($organization_id);
      }
      
      
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      }
      
      // for HTTP post (form)
      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") !== FALSE) {
        $httpBody = http_build_query($formParams);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[api]');
  		return $responseObject;
  }
  
  /**
   * getAPI
   *
   * retrieve an API
   *
   * @param string $api_id id for the API (required)
   * @param string $appid your appid for accessing the API (required)
   * @param string $appkey your appkey for accessing the API (required)
   * @return array[api]
   */
   public function getAPI($api_id, $appid, $appkey) {

      // parse inputs
      $resourcePath = "/api/{api_id}/";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($appid !== null) {
        $queryParams['appid'] = $this->apiClient->toQueryValue($appid);
      }// query params
      if($appkey !== null) {
        $queryParams['appkey'] = $this->apiClient->toQueryValue($appkey);
      }
      
      // path params
      if($api_id !== null) {
        $resourcePath = str_replace("{" . "api_id" . "}",
                                    $this->apiClient->toPathValue($api_id), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      }
      
      // for HTTP post (form)
      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") !== FALSE) {
        $httpBody = http_build_query($formParams);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[api]');
  		return $responseObject;
  }
  
  /**
   * updateAPI
   *
   * update an API
   *
   * @param string $api_id id for the API (required)
   * @param string $appid your appid for accessing the API (required)
   * @param string $appkey your appkey for accessing the API (required)
   * @param string $name name of the API (required)
   * @param string $about details about the API (required)
   * @param string $rank ranking of API (required)
   * @param string $organization_id organization ID for the API (required)
   * @return array[api]
   */
   public function updateAPI($api_id, $appid, $appkey, $name, $about, $rank, $organization_id) {

      // parse inputs
      $resourcePath = "/api/{api_id}/";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "PUT";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($appid !== null) {
        $queryParams['appid'] = $this->apiClient->toQueryValue($appid);
      }// query params
      if($appkey !== null) {
        $queryParams['appkey'] = $this->apiClient->toQueryValue($appkey);
      }// query params
      if($name !== null) {
        $queryParams['name'] = $this->apiClient->toQueryValue($name);
      }// query params
      if($about !== null) {
        $queryParams['about'] = $this->apiClient->toQueryValue($about);
      }// query params
      if($rank !== null) {
        $queryParams['rank'] = $this->apiClient->toQueryValue($rank);
      }// query params
      if($organization_id !== null) {
        $queryParams['organization_id'] = $this->apiClient->toQueryValue($organization_id);
      }
      
      // path params
      if($api_id !== null) {
        $resourcePath = str_replace("{" . "api_id" . "}",
                                    $this->apiClient->toPathValue($api_id), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      }
      
      // for HTTP post (form)
      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") !== FALSE) {
        $httpBody = http_build_query($formParams);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[api]');
  		return $responseObject;
  }
  
  /**
   * deleteAPI
   *
   * delete an API
   *
   * @param string $api_id id for the API (required)
   * @param string $appid your appid for accessing the API (required)
   * @param string $appkey your appkey for accessing the API (required)
   * @return array[api]
   */
   public function deleteAPI($api_id, $appid, $appkey) {

      // parse inputs
      $resourcePath = "/api/{api_id}/";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "DELETE";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($appid !== null) {
        $queryParams['appid'] = $this->apiClient->toQueryValue($appid);
      }// query params
      if($appkey !== null) {
        $queryParams['appkey'] = $this->apiClient->toQueryValue($appkey);
      }
      
      // path params
      if($api_id !== null) {
        $resourcePath = str_replace("{" . "api_id" . "}",
                                    $this->apiClient->toPathValue($api_id), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      }
      
      // for HTTP post (form)
      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") !== FALSE) {
        $httpBody = http_build_query($formParams);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[api]');
  		return $responseObject;
  }
  

}
