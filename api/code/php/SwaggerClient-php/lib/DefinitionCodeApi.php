<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

namespace SwaggerClient;

class DefinitionCodeApi {

  function __construct($apiClient) {
    $this->apiClient = $apiClient;
  }

  
  /**
   * generatePHPArrayParameters
   *
   * generate php array parameters
   *
   * @param string $api_id id for the api item (required)
   * @param string $appid your appid for accessing the API (required)
   * @param string $appkey your appkey for accessing the API (required)
   * @param string $filterobject the api definition object to filter by (required)
   * @return array[snippet]
   */
   public function generatePHPArrayParameters($api_id, $appid, $appkey, $filterobject) {

      // parse inputs
      $resourcePath = "/api/{api_id}/definitions/code/php/generate/definition/parameters/";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($appid !== null) {
        $queryParams['appid'] = $this->apiClient->toQueryValue($appid);
      }// query params
      if($appkey !== null) {
        $queryParams['appkey'] = $this->apiClient->toQueryValue($appkey);
      }// query params
      if($filterobject !== null) {
        $queryParams['filterobject'] = $this->apiClient->toQueryValue($filterobject);
      }
      
      // path params
      if($api_id !== null) {
        $resourcePath = str_replace("{" . "api_id" . "}",
                                    $this->apiClient->toPathValue($api_id), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      }
      
      // for HTTP post (form)
      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") !== FALSE) {
        $httpBody = http_build_query($formParams);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[snippet]');
  		return $responseObject;
  }
  
  /**
   * generatePHPArrayParameters_1
   *
   * generate php array parameters
   *
   * @param string $api_id id for the api item (required)
   * @param string $appid your appid for accessing the API (required)
   * @param string $appkey your appkey for accessing the API (required)
   * @param string $filterpath the api path to filter by (required)
   * @param string $filterverb the api verb to filter by (required)
   * @return array[snippet]
   */
   public function generatePHPArrayParameters_1($api_id, $appid, $appkey, $filterpath, $filterverb) {

      // parse inputs
      $resourcePath = "/api/{api_id}/definitions/code/php/generate/path/parameters/";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($appid !== null) {
        $queryParams['appid'] = $this->apiClient->toQueryValue($appid);
      }// query params
      if($appkey !== null) {
        $queryParams['appkey'] = $this->apiClient->toQueryValue($appkey);
      }// query params
      if($filterpath !== null) {
        $queryParams['filterpath'] = $this->apiClient->toQueryValue($filterpath);
      }// query params
      if($filterverb !== null) {
        $queryParams['filterverb'] = $this->apiClient->toQueryValue($filterverb);
      }
      
      // path params
      if($api_id !== null) {
        $resourcePath = str_replace("{" . "api_id" . "}",
                                    $this->apiClient->toPathValue($api_id), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      }
      
      // for HTTP post (form)
      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") !== FALSE) {
        $httpBody = http_build_query($formParams);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[snippet]');
  		return $responseObject;
  }
  

}
