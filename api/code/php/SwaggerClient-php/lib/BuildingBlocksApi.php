<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

namespace SwaggerClient;

class BuildingBlocksApi {

  function __construct($apiClient) {
    $this->apiClient = $apiClient;
  }

  
  /**
   * getAPIBuildingBlocks
   *
   * retrieve an APIs building blocks
   *
   * @param string $api_id id for the API (required)
   * @param string $appid your appid for accessing the API (required)
   * @param string $appkey your appkey for accessing the API (required)
   * @return array[buildingblock]
   */
   public function getAPIBuildingBlocks($api_id, $appid, $appkey) {

      // parse inputs
      $resourcePath = "/api/{api_id}/buildingblocks/";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($appid !== null) {
        $queryParams['appid'] = $this->apiClient->toQueryValue($appid);
      }// query params
      if($appkey !== null) {
        $queryParams['appkey'] = $this->apiClient->toQueryValue($appkey);
      }
      
      // path params
      if($api_id !== null) {
        $resourcePath = str_replace("{" . "api_id" . "}",
                                    $this->apiClient->toPathValue($api_id), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      }
      
      // for HTTP post (form)
      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") !== FALSE) {
        $httpBody = http_build_query($formParams);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[buildingblock]');
  		return $responseObject;
  }
  
  /**
   * addAPIBuildingBlock
   *
   * add an API building block
   *
   * @param string $api_id id for the API (required)
   * @param string $appid your appid for accessing the API (required)
   * @param string $appkey your appkey for accessing the API (required)
   * @param int $building_block_api id for the building block (required)
   * @param int $organization_id id for the organization (required)
   * @param int $tool_id id for the tool (required)
   * @param string $url the url for the building block (required)
   * @return array[buildingblock]
   */
   public function addAPIBuildingBlock($api_id, $appid, $appkey, $building_block_api, $organization_id, $tool_id, $url) {

      // parse inputs
      $resourcePath = "/api/{api_id}/buildingblocks/";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "POST";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($appid !== null) {
        $queryParams['appid'] = $this->apiClient->toQueryValue($appid);
      }// query params
      if($appkey !== null) {
        $queryParams['appkey'] = $this->apiClient->toQueryValue($appkey);
      }// query params
      if($building_block_api !== null) {
        $queryParams['building_block_api'] = $this->apiClient->toQueryValue($building_block_api);
      }// query params
      if($organization_id !== null) {
        $queryParams['organization_id'] = $this->apiClient->toQueryValue($organization_id);
      }// query params
      if($tool_id !== null) {
        $queryParams['tool_id'] = $this->apiClient->toQueryValue($tool_id);
      }// query params
      if($url !== null) {
        $queryParams['url'] = $this->apiClient->toQueryValue($url);
      }
      
      // path params
      if($api_id !== null) {
        $resourcePath = str_replace("{" . "api_id" . "}",
                                    $this->apiClient->toPathValue($api_id), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      }
      
      // for HTTP post (form)
      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") !== FALSE) {
        $httpBody = http_build_query($formParams);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[buildingblock]');
  		return $responseObject;
  }
  
  /**
   * deleteAPIBuildingBlocks
   *
   * delete an API building block
   *
   * @param string $api_id id for the API (required)
   * @param string $appid your appid for accessing the API (required)
   * @param string $appkey your appkey for accessing the API (required)
   * @param string $buildingblock_id id for the building block (required)
   * @return array[buildingblock]
   */
   public function deleteAPIBuildingBlocks($api_id, $appid, $appkey, $buildingblock_id) {

      // parse inputs
      $resourcePath = "/api/{api_id}/buildingblocks/{buildingblock_id}";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "DELETE";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = '';
      if ($_header_accept !== '') {
        $headerParams['Accept'] = $_header_accept;
      }
      $_header_content_type = array();
      $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

      // query params
      if($appid !== null) {
        $queryParams['appid'] = $this->apiClient->toQueryValue($appid);
      }// query params
      if($appkey !== null) {
        $queryParams['appkey'] = $this->apiClient->toQueryValue($appkey);
      }
      
      // path params
      if($api_id !== null) {
        $resourcePath = str_replace("{" . "api_id" . "}",
                                    $this->apiClient->toPathValue($api_id), $resourcePath);
      }// path params
      if($buildingblock_id !== null) {
        $resourcePath = str_replace("{" . "buildingblock_id" . "}",
                                    $this->apiClient->toPathValue($buildingblock_id), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      }
      
      // for HTTP post (form)
      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") !== FALSE) {
        $httpBody = http_build_query($formParams);
      }

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[buildingblock]');
  		return $responseObject;
  }
  

}
